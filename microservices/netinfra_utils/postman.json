{
	"info": {
		"_postman_id": "c07abf15-092d-410e-b664-d4c2ec6f5fe1",
		"name": "CONDUCTOR latest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SETUP",
			"item": [
				{
					"name": "OC_INTERFACE",
					"item": [
						{
							"name": "Create loopback",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_loopback_interface_unified\",\n  \"description\": \"Create loopback interface - OPENCONFIG, UNIFIED, INTERFACES, LOOPBACK\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNIFIED_write_structured_device_data\",\n      \"taskReferenceName\": \"UNIFIED_write_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/Loopback${workflow.input.loopback_id}\",\n\t\t\"template\": \"{\\\"interface\\\":[{\\\"name\\\":\\\"Loopback${workflow.input.loopback_id}\\\",\\\"config\\\":{\\\"type\\\":\\\"iana-if-type:softwareLoopback\\\",\\\"enabled\\\":false,\\\"name\\\":\\\"Loopback${workflow.input.loopback_id}\\\"}}]}\",\n\t\t\"params\": \"{}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNIFIED_write_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create loopback UNICONFIG",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_loopback_interface_uniconfig\",\n  \"description\": \"Create loopback interface in uniconfig - OPENCONFIG, UNICONFIG, INTERFACES, LOOPBACK\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_write_structured_device_data\",\n      \"taskReferenceName\": \"UNICONFIG_write_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/Loopback${workflow.input.loopback_id}\",\n\t\t\"template\": \"{\\\"interface\\\":[{\\\"name\\\":\\\"Loopback${workflow.input.loopback_id}\\\",\\\"config\\\":{\\\"type\\\":\\\"iana-if-type:softwareLoopback\\\",\\\"enabled\\\":false,\\\"name\\\":\\\"Loopback${workflow.input.loopback_id}\\\"}}]}\",\n\t\t\"params\": \"{}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_write_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete loopback",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Delete_loopback_interface_unified\",\n  \"description\": \"Delete loopback interface - OPENCONFIG, UNIFIED, INTERFACES, LOOPBACK\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNIFIED_delete_structured_device_data\",\n      \"taskReferenceName\": \"UNIFIED_delete_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/Loopback${workflow.input.loopback_id}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNIFIED_delete_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete loopback UNICONFIG",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Delete_loopback_interface_uniconfig\",\n  \"description\": \"Delete loopback interface in uniconfig - OPENCONFIG, UNICONFIG, INTERFACES, LOOPBACK\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_delete_structured_device_data\",\n      \"taskReferenceName\": \"UNICONFIG_delete_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/Loopback${workflow.input.loopback_id}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_delete_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all openconfig interfaces from unified",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_interfaces_all_from_unified\",\n  \"description\": \"read interfaces configuration for all devices in unified topology - OPENCONFIG, UNICONFIG, INTERFACES, LOOPBACK\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_unified\",\n      \"taskReferenceName\": \"read_unified\",\n\t  \"inputParameters\": {\n        \"task\": \"Read_interfaces_unified\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_all_devices_in_unified_as_tasks\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_read_components\",\n      \"taskReferenceName\": \"read_ifcs\",\n\t  \"inputParameters\": {\n        \"dynamic_tasks\": \"${read_unified.output.dynamic_tasks}\",\n        \"dynamic_tasks_i\": \"${read_unified.output.dynamic_tasks_i}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Dynamic_fork\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"interfaces\": \"${read_ifcs.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create loopback all from unified",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_loopback_all_in_unified\",\n  \"description\": \"Create loopback interface for all devices in unified topology - OPENCONFIG, UNIFIED, INTERFACES, LOOPBACK\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_unified\",\n      \"taskReferenceName\": \"read_unified\",\n\t  \"inputParameters\": {\n        \"task\": \"Create_loopback_interface_unified\",\n        \"task_params\": \"{\\\"loopback_id\\\": \\\"${workflow.input.loopback_id}\\\"}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_all_devices_in_unified_as_tasks\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_create_loopback\",\n      \"taskReferenceName\": \"create_loopback\",\n\t  \"inputParameters\": {\n        \"dynamic_tasks\": \"${read_unified.output.dynamic_tasks}\",\n        \"dynamic_tasks_i\": \"${read_unified.output.dynamic_tasks_i}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Dynamic_fork\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"interfaces\": \"${create_loopback.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create loopback all in UNICONFIG",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_loopback_all_in_uniconfig\",\n  \"description\": \"Create loopback interface for all devices in uniconfig topology - OPENCONFIG, UNICONFIG, INTERFACES, LOOPBACK\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_unified\",\n      \"taskReferenceName\": \"read_unified\",\n\t  \"inputParameters\": {\n        \"task\": \"Create_loopback_interface_uniconfig\",\n        \"task_params\": \"{\\\"loopback_id\\\": \\\"${workflow.input.loopback_id}\\\"}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_all_devices_as_tasks_in_uniconfig\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_create_loopback\",\n      \"taskReferenceName\": \"create_loopback\",\n\t  \"inputParameters\": {\n        \"dynamic_tasks\": \"${read_unified.output.dynamic_tasks}\",\n        \"dynamic_tasks_i\": \"${read_unified.output.dynamic_tasks_i}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Dynamic_fork\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_calc_diff\",\n      \"taskReferenceName\": \"calc_diff\",\n      \"type\": \"SUB_WORKFLOW\",\n       \"inputParameters\": {\n        \"devices\": \"${create_loopback.output.forkedTasks}\"\n      },\n      \"subWorkflowParam\": {\n        \"name\": \"UNICONFIG_calculate_diff\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_dryrun_commit\",\n      \"taskReferenceName\": \"dryrun_commit\",\n      \"type\": \"SUB_WORKFLOW\",\n      \"inputParameters\": {\n        \"devices\": \"${create_loopback.output.forkedTasks}\"\n      },\n      \"subWorkflowParam\": {\n        \"name\": \"UNICONFIG_dryrun_commit\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_commit\",\n      \"taskReferenceName\": \"commit\",\n      \"type\": \"SUB_WORKFLOW\",\n      \"inputParameters\": {\n        \"devices\": \"${create_loopback.output.forkedTasks}\"\n      },\n      \"subWorkflowParam\": {\n        \"name\": \"UNICONFIG_commit\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"interfaces\": \"${UNICONFIG_commit.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read all interfaces",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_interfaces_unified\",\n  \"description\": \"Read device interface configuration in structured format - OPENCONFIG, UNIFIED, INTERFACES\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNIFIED_read_structured_device_data\",\n      \"taskReferenceName\": \"UNIFIED_read_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"/frinx-openconfig-interfaces:interfaces/\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"data\": \"${UNIFIED_read_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SOUTHBOUND",
					"item": [
						{
							"name": "Mount cli",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Mount_cli_device\",\n  \"description\": \"mount a CLI device - CLI, SOUTHBOUND\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"CLI_mount_cli\",\n      \"taskReferenceName\": \"CLI_mount_cli\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"type\": \"${workflow.input.type}\",\n        \"version\": \"${workflow.input.version}\",\n        \"host\": \"${workflow.input.host}\",\n        \"protocol\": \"${workflow.input.protocol}\",\n        \"port\": \"${workflow.input.port}\",\n        \"username\": \"${workflow.input.username}\",\n        \"password\": \"${workflow.input.password}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mount netconf",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n    \"name\": \"Mount_netconf_device\",\n    \"description\": \"mount a Netconf device - NETCONF, SOUTHBOUND\",\n    \"version\": 1,\n    \"tasks\": [\n        {\n            \"name\": \"Netconf_check_netconf_id_available\",\n            \"taskReferenceName\": \"Netconf_check_netconf_id_available\",\n            \"inputParameters\": {\n                \"id\": \"${workflow.input.id}\"\n            },\n            \"type\": \"SIMPLE\",\n            \"startDelay\": 0\n        },\n        {\n            \"name\": \"Netconf_mount_netconf\",\n            \"taskReferenceName\": \"Netconf_mount_netconf\",\n            \"inputParameters\": {\n                \"id\": \"${workflow.input.id}\",\n                \"host\": \"${workflow.input.host}\",\n                \"port\": \"${workflow.input.port}\",\n                \"keepalive-delay\": \"${workflow.input.keepalivedelay}\",\n                \"tcp-only\": \"${workflow.input.tcponly}\",\n                \"username\": \"${workflow.input.username}\",\n                \"password\": \"${workflow.input.password}\"\n            },\n            \"type\": \"SIMPLE\",\n            \"startDelay\": 0\n        }\n    ],\n    \"outputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n    },\n    \"restartable\": true,\n    \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check cli connected",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Check_connection_cli_device\",\n  \"description\": \"check connection to a CLI device - CLI, SOUTHBOUND\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"CLI_check_cli_connected\",\n      \"taskReferenceName\": \"CLI_check_cli_connected\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"mount\": \"${CLI_check_cli_connected.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read cli journal",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_journal_cli_device\",\n  \"description\": \"Read cli journal for a device - JOURNAL, CLI, SOUTHBOUND\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"CLI_get_cli_journal\",\n      \"taskReferenceName\": \"CLI_get_cli_journal\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"journal\": \"${CLI_get_cli_journal.output.response_body.output.journal}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mount and check cli",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Mount_and_check\",\n  \"description\": \"mount, check and leave device mounted - CLI, SOUTHBOUND\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_mount\",\n      \"taskReferenceName\": \"mount\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"type\": \"${workflow.input.type}\",\n        \"version\": \"${workflow.input.version}\",\n        \"host\": \"${workflow.input.host}\",\n        \"protocol\": \"${workflow.input.protocol}\",\n        \"port\": \"${workflow.input.port}\",\n        \"username\": \"${workflow.input.username}\",\n        \"password\": \"${workflow.input.password}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Mount_cli_device\",\n        \"version\": 1\n      }\n    },\n\t{\n      \"name\": \"sub_check\",\n      \"taskReferenceName\": \"check_mounted\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Check_connection_cli_device\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"mount\": \"${check_mounted.output.mount}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mount cli from Inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Mount_cli_from_inventory\",\n  \"description\": \"mount and check a CLI device from inventory - CLI, SOUTHBOUND, INVENTORY\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_inventory\",\n      \"taskReferenceName\": \"read_inventory\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_device_from_inventory\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_mount\",\n      \"taskReferenceName\": \"mount\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"type\": \"${read_inventory.output.device.device_type}\",\n        \"version\": \"${read_inventory.output.device.device_version}\",\n        \"host\": \"${read_inventory.output.device.host}\",\n        \"protocol\": \"${read_inventory.output.device.transport_type}\",\n        \"port\": \"${read_inventory.output.device.port}\",\n        \"username\": \"${read_inventory.output.device.username}\",\n        \"password\": \"${read_inventory.output.device.password}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Mount_and_check\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"inventory\": \"${read_inventory.output.device}\",\n \t\"odl\": \"${mount.output.mount}\",\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mount all cli from Inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Mount_all_cli_from_inventory\",\n  \"description\": \"mount and check all CLI devices from inventory - CLI, SOUTHBOUND, INVENTORY\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_inventory\",\n      \"taskReferenceName\": \"read_inventory\",\n\t  \"inputParameters\": {\n        \"type\": \"${workflow.input.type}\",\n        \"task\": \"Mount_cli_from_inventory\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_all_devices_as_tasks_from_inventory\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_mount\",\n      \"taskReferenceName\": \"mount\",\n\t  \"inputParameters\": {\n        \"dynamic_tasks\": \"${read_inventory.output.dynamic_tasks}\",\n        \"dynamic_tasks_i\": \"${read_inventory.output.dynamic_tasks_i}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Dynamic_fork\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"ids\": \"${mount.output.forkedTasks}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "UNmount cli",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Unmount_cli_device\",\n  \"description\": \"unmount a CLI device - CLI, SOUTHBOUND\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"CLI_unmount_cli\",\n      \"taskReferenceName\": \"CLI_unmount_cli\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    },\n  \t{\n      \"name\": \"CLI_check_cli_id_available\",\n      \"taskReferenceName\": \"CLI_check_cli_id_available\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute and read cli",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Execute_and_read_rpc_cli_device\",\n  \"description\": \"execute commands for a CLI device - SOUTHBOUND, CLI, EXECUTEANDREAD\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"CLI_execute_and_read_rpc_cli\",\n      \"taskReferenceName\": \"CLI_execute_and_read_rpc_cli\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t\t\"id\": \"${workflow.input.id}\",\n        \"template\": \"${workflow.input.template}\",\n        \"params\": \"${workflow.input.params}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"output\": \"${CLI_execute_and_read_rpc_cli.output.response_body.output.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute and read cli from inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Execute_and_read_rpc_cli_device_from_inventory\",\n  \"description\": \"execute commands loaded from inventory for a CLI device - SOUTHBOUND, CLI, EXECUTEANDREAD, INVENTORY\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"sub_read_command\",\n      \"taskReferenceName\": \"read_command\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.command_id}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_cli_show_command_from_inventory\",\n        \"version\": 1\n      }\n    },\n    {\n      \"name\": \"sub_execute\",\n      \"taskReferenceName\": \"execute_template\",\n\t  \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"template\": \"${read_command.output.command}\",\n\t\t\"params\": \"${workflow.input.params}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Execute_and_read_rpc_cli_device\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"output\": \"${execute_template.output.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute and read cli from inventory and update inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Execute_and_read_rpc_cli_device_from_inventory_update_inventory\",\n  \"description\": \"execute commands loaded from inventory for a CLI device and store the output in inventory - SOUTHBOUND, CLI, EXECUTEANDREAD, INVENTORY\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"sub_execute\",\n      \"taskReferenceName\": \"execute_template\",\n\t  \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"command_id\": \"${workflow.input.command_id}\",\n\t\t\"params\": \"${workflow.input.params}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Execute_and_read_rpc_cli_device_from_inventory\",\n        \"version\": 1\n      }\n    },\n    {\n      \"name\": \"sub_store_in_inventory\",\n      \"taskReferenceName\": \"save\",\n\t  \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"field\": \"${workflow.input.command_id}\",\n        \"value\": \"${execute_template.output.output}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Add_field_to_device_in_inventory\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"output\": \"${execute_template.output.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mount, Check, Execute, UNmount",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Mount_apply_template_unmount_cli\",\n  \"description\": \"mount, check, apply template and unmount a CLI device - SOUTHBOUND, CLI\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_mount\",\n      \"taskReferenceName\": \"mount\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"type\": \"${workflow.input.type}\",\n        \"version\": \"${workflow.input.version}\",\n        \"host\": \"${workflow.input.host}\",\n        \"protocol\": \"${workflow.input.protocol}\",\n        \"port\": \"${workflow.input.port}\",\n        \"username\": \"${workflow.input.username}\",\n        \"password\": \"${workflow.input.password}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Mount_cli_device\",\n        \"version\": 1\n      }\n    },\n\t{\n      \"name\": \"sub_check\",\n      \"taskReferenceName\": \"check_mounted\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Check_connection_cli_device\",\n        \"version\": 1\n      }\n    },\n    {\n      \"name\": \"sub_execute\",\n      \"taskReferenceName\": \"execute_template\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"template\": \"${workflow.input.template}\",\n\t\t\"params\": \"${workflow.input.params}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Execute_and_read_rpc_cli_device\",\n        \"version\": 1\n      }\n    },\n\t{\n      \"name\": \"sub_unmount\",\n      \"taskReferenceName\": \"unmount\",\n\t\t\"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Unmount_cli_device\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Example IPAM http",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Integration_with_external_ipam\",\n  \"description\": \"consult ipam, mount, check, apply template and unmount a CLI device - EXAMPLE, CLI, IPAM, EXTERNAL\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"http_get_generic\",\n      \"taskReferenceName\": \"http_get_generic\",\n      \"inputParameters\": {\n        \"http_request\": {\n          \"uri\": \"http://172.17.0.1:9999\",\n          \"method\": \"GET\"\n        }\n      },\n      \"type\": \"HTTP\"\n    },\n    {\n      \"name\": \"sub_unmount\",\n      \"taskReferenceName\": \"unmount\",\n\t\t\"inputParameters\": {\n        \"id\": \"${http_get_generic.output.response.body.id}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Unmount_cli_device\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_exec\",\n      \"taskReferenceName\": \"exec\",\n\t\t\"inputParameters\": {\n        \"id\": \"${http_get_generic.output.response.body.id}\",\n\t\t\"type\": \"${http_get_generic.output.response.body.type}\",\n        \"version\": \"${http_get_generic.output.response.body.version}\",\n        \"host\": \"${http_get_generic.output.response.body.host}\",\n        \"protocol\": \"${http_get_generic.output.response.body.protocol}\",\n        \"port\": \"${http_get_generic.output.response.body.port}\",\n        \"username\": \"${http_get_generic.output.response.body.username}\",\n        \"password\": \"${http_get_generic.output.response.body.password}\",\n        \"template\": \"${workflow.input.template}\",\n\t\t\"params\": \"${workflow.input.params}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Mount_apply_template_unmount_cli\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Read cli topology oper",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_cli_topology_operational\",\n  \"description\": \"Read operational state of CLI - SOUTHBOUND, CLI, OPER\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"CLI_read_cli_topology_operational\",\n      \"taskReferenceName\": \"CLI_read_cli_topology_operational\",\n      \"type\": \"SIMPLE\"\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${CLI_read_cli_topology_operational.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all devices as tasks",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Get_all_cli_devices_as_tasks\",\n  \"description\": \"get all devices in CLI topology as workflow tasks - SOUTHBOUND, CLI\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"CLI_get_all_devices_as_tasks\",\n      \"taskReferenceName\": \"CLI_get_all_devices_as_tasks\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t\t\"task\": \"${workflow.input.task}\",\n\t\t\"task_input\": \"${workflow.input.task_input}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"dynamic_tasks_i\": \"${CLI_get_all_devices_as_tasks.output.dynamic_tasks_i}\",\n    \"dynamic_tasks\": \"${CLI_get_all_devices_as_tasks.output.dynamic_tasks}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Execute all from cli and update inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Execute_all_from_cli_update_inventory\",\n  \"description\": \"execute a command from inventory for all devices in cli topology and store in inventory - SOUTHBOUND, CLI, INVENTORY\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_unified\",\n      \"taskReferenceName\": \"read_unified\",\n\t  \"inputParameters\": {\n        \"task\": \"Execute_and_read_rpc_cli_device_from_inventory_update_inventory\",\n        \"task_input\": {\n        \t\"command_id\": \"${workflow.input.command_id}\",\n\t\t\t\"params\": \"${workflow.input.params}\"\n        }\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_all_cli_devices_as_tasks\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_execute_command\",\n      \"taskReferenceName\": \"execute_command\",\n\t  \"inputParameters\": {\n        \"dynamic_tasks\": \"${read_unified.output.dynamic_tasks}\",\n        \"dynamic_tasks_i\": \"${read_unified.output.dynamic_tasks_i}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Dynamic_fork\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"ids\": \"${execute_command.output.forkedTasks}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "OC-PLATFORM",
					"item": [
						{
							"name": "Get openconfig components",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_components_openconfig\",\n  \"description\": \"Read components in openconfig format - OPENCONFIG, PLATFORM, UNIFIED\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"OC-PLATFORM_read_components\",\n      \"taskReferenceName\": \"OC-PLATFORM_read_components\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"components\": \"${OC-PLATFORM_read_components.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get openconfig components and update inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_components_update_inventory\",\n  \"description\": \"Read components in openconfig format and store in inventory - OPENCONFIG, PLATFORM, UNIFIED, INVENTORY\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_unified\",\n      \"taskReferenceName\": \"read_unified\",\n\t  \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Read_components_openconfig\",\n        \"version\": 1\n      }\n    },\n    {\n      \"name\": \"sub_store_in_intenvory\",\n      \"taskReferenceName\": \"save\",\n\t  \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"field\": \"components\",\n        \"value\": \"${read_unified.output.components.components}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Add_nested_field_to_device_in_inventory\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"components\": \"${read_unified.output.components.components}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Example 3 node openconfig components",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Sample_Batch_inventory_retrieval_workflow\",\n  \"description\": \"Mount 3 devices, read HW components and unmount - EXAMPLE\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n        \"name\": \"parallel_mount\",\n        \"taskReferenceName\": \"fork_mount\",\n        \"type\": \"FORK_JOIN\",\n        \"forkTasks\": [\n          [\n            {\n          \"name\": \"sub_mount\",\n          \"taskReferenceName\": \"mount1\",\n        \t\"inputParameters\": {\n            \"id\": \"device1\",\n        \t\"type\": \"${workflow.input.device1_type}\",\n            \"version\": \"${workflow.input.device1_version}\",\n            \"host\": \"${workflow.input.common_ip}\",\n            \"protocol\": \"ssh\",\n            \"port\": \"${workflow.input.device1_port}\",\n            \"username\": \"${workflow.input.device1_uname}\",\n            \"password\": \"${workflow.input.device1_passwd}\"\n          },\n          \"type\": \"SUB_WORKFLOW\",\n          \"subWorkflowParam\": {\n            \"name\": \"Mount_and_check\",\n            \"version\": 1\n          }\n        }\n          ],\n          [\n           {\n          \"name\": \"sub_mount\",\n          \"taskReferenceName\": \"mount2\",\n        \t\"inputParameters\": {\n            \"id\": \"device2\",\n        \t\"type\": \"${workflow.input.device2_type}\",\n            \"version\": \"${workflow.input.device2_version}\",\n            \"host\": \"${workflow.input.common_ip}\",\n            \"protocol\": \"ssh\",\n            \"port\": \"${workflow.input.device2_port}\",\n            \"username\": \"${workflow.input.device2_uname}\",\n            \"password\": \"${workflow.input.device2_passwd}\"\n          },\n          \"type\": \"SUB_WORKFLOW\",\n          \"subWorkflowParam\": {\n            \"name\": \"Mount_and_check\",\n            \"version\": 1\n          }\n        }\n          ],\n          [\n           {\n          \"name\": \"sub_mount\",\n          \"taskReferenceName\": \"mount3\",\n        \t\"inputParameters\": {\n            \"id\": \"device3\",\n        \t\"type\": \"${workflow.input.device3_type}\",\n            \"version\": \"${workflow.input.device3_version}\",\n            \"host\": \"${workflow.input.common_ip}\",\n            \"protocol\": \"ssh\",\n            \"port\": \"${workflow.input.device3_port}\",\n            \"username\": \"${workflow.input.device3_uname}\",\n            \"password\": \"${workflow.input.device3_passwd}\"\n          },\n          \"type\": \"SUB_WORKFLOW\",\n          \"subWorkflowParam\": {\n            \"name\": \"Mount_and_check\",\n            \"version\": 1\n          }\n        }\n          ]\n        ]\n      },\n      {\n      \"name\": \"join_mount\",\n      \"taskReferenceName\": \"join_mount\",\n      \"type\": \"JOIN\",\n      \"joinOn\": [\n        \"mount1\",\n        \"mount2\",\n        \"mount3\"\n      ]\n    },\n    \n\t{\n        \"name\": \"parallel_read\",\n        \"taskReferenceName\": \"fork_read\",\n        \"type\": \"FORK_JOIN\",\n        \"forkTasks\": [\n          [\n            {\n\t          \"name\": \"sub_read\",\n\t          \"taskReferenceName\": \"read1\",\n\t    \t  \"inputParameters\": {\n\t            \"id\": \"device1\"\n\t          },\n\t          \"type\": \"SUB_WORKFLOW\",\n\t          \"subWorkflowParam\": {\n\t            \"name\": \"Read_structured_device_data_in_unified\",\n\t            \"version\": 1\n\t          }\n\t        }\n          ],\n          [\n           {\n\t          \"name\": \"sub_read\",\n\t          \"taskReferenceName\": \"read2\",\n\t    \t  \"inputParameters\": {\n\t            \"id\": \"device2\"\n\t          },\n\t          \"type\": \"SUB_WORKFLOW\",\n\t          \"subWorkflowParam\": {\n\t            \"name\": \"Read_structured_device_data_in_unified\",\n\t            \"version\": 1\n\t          }\n\t        }\n          ],\n          [\n           {\n\t          \"name\": \"sub_read\",\n\t          \"taskReferenceName\": \"read3\",\n\t    \t  \"inputParameters\": {\n\t            \"id\": \"device3\"\n\t          },\n\t          \"type\": \"SUB_WORKFLOW\",\n\t          \"subWorkflowParam\": {\n\t            \"name\": \"Read_structured_device_data_in_unified\",\n\t            \"version\": 1\n\t          }\n\t        }\n          ]\n        ]\n      },\n      {\n      \"name\": \"join_read\",\n      \"taskReferenceName\": \"join_read\",\n      \"type\": \"JOIN\",\n      \"joinOn\": [\n        \"read1\",\n        \"read2\",\n        \"read3\"\n      ]\n    },\n    \n    \t{\n        \"name\": \"parallel_unmount\",\n        \"taskReferenceName\": \"fork_unmount\",\n        \"type\": \"FORK_JOIN\",\n        \"forkTasks\": [\n          [\n            {\n\t          \"name\": \"sub_unmount\",\n\t          \"taskReferenceName\": \"umount1\",\n\t    \t  \"inputParameters\": {\n\t            \"id\": \"device1\"\n\t          },\n\t          \"type\": \"SUB_WORKFLOW\",\n\t          \"subWorkflowParam\": {\n\t            \"name\": \"Unmount_cli_device\",\n\t            \"version\": 1\n\t          }\n\t        }\n          ],\n          [\n           {\n\t          \"name\": \"sub_unmount\",\n\t          \"taskReferenceName\": \"umount2\",\n\t    \t  \"inputParameters\": {\n\t            \"id\": \"device2\"\n\t          },\n\t          \"type\": \"SUB_WORKFLOW\",\n\t          \"subWorkflowParam\": {\n\t            \"name\": \"Unmount_cli_device\",\n\t            \"version\": 1\n\t          }\n\t        }\n          ],\n          [\n           {\n\t          \"name\": \"sub_unmount\",\n\t          \"taskReferenceName\": \"umount3\",\n\t    \t  \"inputParameters\": {\n\t            \"id\": \"device3\"\n\t          },\n\t          \"type\": \"SUB_WORKFLOW\",\n\t          \"subWorkflowParam\": {\n\t            \"name\": \"Unmount_cli_device\",\n\t            \"version\": 1\n\t          }\n\t        }\n          ]\n        ]\n      },\n      {\n      \"name\": \"join_unmount\",\n      \"taskReferenceName\": \"join_unmount\",\n      \"type\": \"JOIN\",\n      \"joinOn\": [\n        \"umount1\",\n        \"umount2\",\n        \"umount3\"\n      ]\n    }\n  ],\n  \"outputParameters\": {\n    \"device1\": \"${read1.output.components}\",\n    \"device2\": \"${read2.output.components}\",\n    \"device3\": \"${read3.output.components}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all openconfig components from unified",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_components_all_from_unified\",\n  \"description\": \"read components for all devices in unified topology - OPENCONFIG, PLATFORM, UNIFIED\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_unified\",\n      \"taskReferenceName\": \"read_unified\",\n\t  \"inputParameters\": {\n        \"task\": \"Read_components_openconfig\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_all_devices_in_unified_as_tasks\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_read_components\",\n      \"taskReferenceName\": \"read_components\",\n\t  \"inputParameters\": {\n        \"dynamic_tasks\": \"${read_unified.output.dynamic_tasks}\",\n        \"dynamic_tasks_i\": \"${read_unified.output.dynamic_tasks_i}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Dynamic_fork\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"a\": \"b\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all openconfig components from unified and update inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_components_all_from_unified_update_inventory\",\n  \"description\": \"read components for all devices in unified topology and store in inventory - OPENCONFIG, PLATFORM, UNIFIED, INVENTORY\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_read_unified\",\n      \"taskReferenceName\": \"read_unified\",\n\t  \"inputParameters\": {\n        \"task\": \"Read_components_update_inventory\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Get_all_devices_in_unified_as_tasks\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_read_components\",\n      \"taskReferenceName\": \"read_components\",\n\t  \"inputParameters\": {\n        \"dynamic_tasks\": \"${read_unified.output.dynamic_tasks}\",\n        \"dynamic_tasks_i\": \"${read_unified.output.dynamic_tasks_i}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Dynamic_fork\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n  \t\"a\": \"b\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "INVENTORY",
					"item": [
						{
							"name": "Add cli device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Add_cli_device_to_inventory\",\n  \"description\": \"add a CLI device to inventory database - INVENTORY, CLI\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Unique identifier of device across all systems]\",\n\t\"type[Type of device or device IOS e.g. ios, ios xr]\",\n\t\"version[Version of device or device OS e.g. 15.2]\",\n\t\"host[IP or hostname of the management endpoint on a device]\",\n\t\"protocol[CLI management transport protocol e.g. tcp or ssh][ssh]\",\n\t\"port[TCP port of the management endpoint of a device][22]\",\n\t\"username[Username credential]\",\n\t\"password[Password credential]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_add_device\",\n      \"taskReferenceName\": \"INVENTORY_add_device\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"type\": \"${workflow.input.type}\",\n        \"version\": \"${workflow.input.version}\",\n        \"host\": \"${workflow.input.host}\",\n        \"protocol\": \"${workflow.input.protocol}\",\n        \"port\": \"${workflow.input.port}\",\n        \"username\": \"${workflow.input.username}\",\n        \"password\": \"${workflow.input.password}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Add field to device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Add_field_to_device_in_inventory\",\n  \"description\": \"add a field key/value to device in inventory database - INVENTORY\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Unique identifier of a command in DB]\",\n\t\"field[Key (identifier) of a new field]\",\n\t\"value[Value (content) of a new field]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_add_field_to_device\",\n      \"taskReferenceName\": \"INVENTORY_add_field_to_device\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"field\": \"${workflow.input.field}\",\n        \"value\": \"${workflow.input.value}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Add nested field to device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Add_nested_field_to_device_in_inventory\",\n  \"description\": \"add a nested field (nested json structure) to device in inventory database - INVENTORY\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Unique identifier of a command in DB]\",\n\t\"field[Key (identifier) of a new field]\",\n\t\"value[Value (json content) of a new field]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_add_nested_field_to_device\",\n      \"taskReferenceName\": \"INVENTORY_nested_add_field_to_device\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"field\": \"${workflow.input.field}\",\n        \"value\": \"${workflow.input.value}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Remove cli device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Remove_cli_device_from_inventory\",\n  \"description\": \"remove a CLI device to inventory database - INVENTORY, CLI\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Unique identifier of a command in DB]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_remove_device\",\n      \"taskReferenceName\": \"INVENTORY_remove_device\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Get all devices",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Get_all_devices_in_inventory\",\n  \"description\": \"get all devices in inventory database - INVENTORY\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"type[Optional filtering parameter which selects devices from inventory based on their type field]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_get_all_devices\",\n      \"taskReferenceName\": \"INVENTORY_get_all_devices\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t\t\"type\": \"${workflow.input.type}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"devices\": \"${INVENTORY_get_all_devices.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Get device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Get_device_from_inventory\",\n  \"description\": \"get 1 device from inventory database - INVENTORY\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Unique identifier of a command in DB]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_get_device\",\n      \"taskReferenceName\": \"INVENTORY_get_device\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"device\": \"${INVENTORY_get_device.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Get all devices as tasks",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Get_all_devices_as_tasks_from_inventory\",\n  \"description\": \"get all devices in inventory database as workflow tasks - INVENTORY\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"type[Optional filtering parameter which selects devices from inventory based on their type field]\",\n\t\"task[Name of a task to schedule for subsequent execution in the output]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_get_all_devices_as_tasks\",\n      \"taskReferenceName\": \"INVENTORY_get_all_devices_as_tasks\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t\t\"type\": \"${workflow.input.type}\",\n\t\t\"task\": \"${workflow.input.task}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"dynamic_tasks_i\": \"${INVENTORY_get_all_devices_as_tasks.output.dynamic_tasks_i}\",\n    \"dynamic_tasks\": \"${INVENTORY_get_all_devices_as_tasks.output.dynamic_tasks}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Add cli show command",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Add_cli_show_command_to_inventory\",\n  \"description\": \"add a CLI show command to inventory database - INVENTORY\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Unique identifier of a command in DB]\",\n\t\"command[Actual show command e.g. show running-config]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_add_show_command\",\n      \"taskReferenceName\": \"INVENTORY_add_device\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"command\": \"${workflow.input.command}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${workflow.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Get cli show command",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Get_cli_show_command_from_inventory\",\n  \"description\": \"get 1 show command from inventory database - INVENTORY\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Unique identifier of a command in DB]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"INVENTORY_get_show_command\",\n      \"taskReferenceName\": \"INVENTORY_get_show_command\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"command\": \"${INVENTORY_get_show_command.output.response_body.command}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "L2VPN",
					"item": [
						{
							"name": "L2VPN P2P OC Create",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_L2VPN_P2P_OC_uniconfig\",\n  \"description\": \"Create P2P L2VPN in uniconfig - OPENCONFIG, UNICONFIG, L2VPN, CREATE\",\n  \"version\": 2,\n  \"tasks\": [\n    {\n      \"name\": \"UNICONFIG_sync_from_network\",\n      \"taskReferenceName\": \"uniconfig_sync_from_network_ref_LYVS\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"startDelay\": 0,\n      \"subWorkflowParam\": {\n        \"name\": \"UNICONFIG_sync_from_network\",\n        \"version\": 1\n      },\n      \"optional\": false\n    },\n    {\n      \"name\": \"UNICONFIG_replace_config_with_oper\",\n      \"taskReferenceName\": \"uniconfig_replace_config_with_oper_ref_JTJ4\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"startDelay\": 0,\n      \"subWorkflowParam\": {\n        \"name\": \"UNICONFIG_replace_config_with_oper\",\n        \"version\": 1\n      },\n      \"optional\": false\n    },\n    {\n      \"name\": \"UNICONFIG_write_structured_device_data\",\n      \"taskReferenceName\": \"UNICONFIG_write_structured_device_data_on_first_node\",\n      \"inputParameters\": {\n        \"node01\": \"${workflow.input.node01}\",\n        \"id\": \"${workflow.input.node01}\",\n        \"interface01\": \"${workflow.input.interface01}\",\n        \"VCID\": \"${workflow.input.vcid}\",\n        \"uri\": \"/frinx-openconfig-network-instance:network-instances/network-instance/conn1233\",\n        \"template\": \"{\\r\\n      \\\"frinx-openconfig-network-instance:network-instance\\\": [\\r\\n        {\\r\\n          \\\"name\\\": \\\"conn1233\\\",\\r\\n          \\\"config\\\": {\\r\\n            \\\"name\\\": \\\"conn1233\\\",\\r\\n            \\\"type\\\": \\\"frinx-openconfig-network-instance-types:L2P2P\\\"\\r\\n          },\\r\\n          \\\"connection-points\\\": {\\r\\n            \\\"connection-point\\\": [\\r\\n              {\\r\\n                \\\"connection-point-id\\\": \\\"1\\\",\\r\\n                \\\"config\\\": {\\r\\n                  \\\"connection-point-id\\\": \\\"1\\\"\\r\\n                },\\r\\n                \\\"endpoints\\\": {\\r\\n                  \\\"endpoint\\\": [\\r\\n                    {\\r\\n                      \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                      \\\"config\\\": {\\r\\n                        \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                        \\\"precedence\\\": 0,\\r\\n                        \\\"type\\\": \\\"frinx-openconfig-network-instance-types:LOCAL\\\"\\r\\n                      },\\r\\n                      \\\"local\\\": {\\r\\n                        \\\"config\\\": {\\r\\n                          \\\"interface\\\": \\\"${workflow.input.interface01}\\\"\\r\\n                        }\\r\\n                      }\\r\\n                    }\\r\\n                  ]\\r\\n                }\\r\\n              },\\r\\n              {\\r\\n                \\\"connection-point-id\\\": \\\"2\\\",\\r\\n                \\\"config\\\": {\\r\\n                  \\\"connection-point-id\\\": \\\"2\\\"\\r\\n                },\\r\\n                \\\"endpoints\\\": {\\r\\n                  \\\"endpoint\\\": [\\r\\n                    {\\r\\n                      \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                      \\\"config\\\": {\\r\\n                        \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                        \\\"precedence\\\": 0,\\r\\n                        \\\"type\\\": \\\"frinx-openconfig-network-instance-types:REMOTE\\\"\\r\\n                      },\\r\\n                      \\\"remote\\\": {\\r\\n                        \\\"config\\\": {\\r\\n                          \\\"remote-system\\\": \\\"8.8.8.8\\\",\\r\\n                          \\\"virtual-circuit-identifier\\\": ${workflow.input.vcid}\\r\\n                        }\\r\\n                      }\\r\\n                    }\\r\\n                  ]\\r\\n                }\\r\\n              }\\r\\n            ]\\r\\n          }\\r\\n        }\\r\\n      ]\\r\\n    \\r\\n  }\",\n        \"params\": \"{}\"\n      },\n      \"type\": \"SIMPLE\",\n      \"startDelay\": 0,\n      \"optional\": false\n    },\n    {\n      \"name\": \"UNICONFIG_write_structured_device_data\",\n      \"taskReferenceName\": \"UNICONFIG_write_structured_device_data_on_second_node\",\n      \"inputParameters\": {\n        \"node02\": \"${workflow.input.node02}\",\n        \"id\": \"${workflow.input.node02}\",\n        \"interface02\": \"${workflow.input.interface02}\",\n        \"uri\": \"/frinx-openconfig-network-instance:network-instances/network-instance/conn1233\",\n        \"template\": \"{\\r\\n      \\\"frinx-openconfig-network-instance:network-instance\\\": [\\r\\n        {\\r\\n          \\\"name\\\": \\\"conn1233\\\",\\r\\n          \\\"config\\\": {\\r\\n            \\\"name\\\": \\\"conn1233\\\",\\r\\n            \\\"type\\\": \\\"frinx-openconfig-network-instance-types:L2P2P\\\"\\r\\n          },\\r\\n          \\\"connection-points\\\": {\\r\\n            \\\"connection-point\\\": [\\r\\n              {\\r\\n                \\\"connection-point-id\\\": \\\"1\\\",\\r\\n                \\\"config\\\": {\\r\\n                  \\\"connection-point-id\\\": \\\"1\\\"\\r\\n                },\\r\\n                \\\"endpoints\\\": {\\r\\n                  \\\"endpoint\\\": [\\r\\n                    {\\r\\n                      \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                      \\\"config\\\": {\\r\\n                        \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                        \\\"precedence\\\": 0,\\r\\n                        \\\"type\\\": \\\"frinx-openconfig-network-instance-types:LOCAL\\\"\\r\\n                      },\\r\\n                      \\\"local\\\": {\\r\\n                        \\\"config\\\": {\\r\\n                          \\\"interface\\\": \\\"${workflow.input.interface02}\\\"\\r\\n                        }\\r\\n                      }\\r\\n                    }\\r\\n                  ]\\r\\n                }\\r\\n              },\\r\\n              {\\r\\n                \\\"connection-point-id\\\": \\\"2\\\",\\r\\n                \\\"config\\\": {\\r\\n                  \\\"connection-point-id\\\": \\\"2\\\"\\r\\n                },\\r\\n                \\\"endpoints\\\": {\\r\\n                  \\\"endpoint\\\": [\\r\\n                    {\\r\\n                      \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                      \\\"config\\\": {\\r\\n                        \\\"endpoint-id\\\": \\\"default\\\",\\r\\n                        \\\"precedence\\\": 0,\\r\\n                        \\\"type\\\": \\\"frinx-openconfig-network-instance-types:REMOTE\\\"\\r\\n                      },\\r\\n                      \\\"remote\\\": {\\r\\n                        \\\"config\\\": {\\r\\n                          \\\"remote-system\\\": \\\"7.7.7.7\\\",\\r\\n                          \\\"virtual-circuit-identifier\\\": ${workflow.input.vcid}\\r\\n                        }\\r\\n                      }\\r\\n                    }\\r\\n                  ]\\r\\n                }\\r\\n              }\\r\\n            ]\\r\\n          }\\r\\n        }\\r\\n      ]\\r\\n    \\r\\n  }\",\n        \"params\": \"{}\"\n      },\n      \"type\": \"SIMPLE\",\n      \"startDelay\": 0,\n      \"optional\": false\n    },\n    {\n      \"name\": \"UNICONFIG_commit\",\n      \"taskReferenceName\": \"uniconfig_commit_ref_RXFF\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"startDelay\": 0,\n      \"subWorkflowParam\": {\n        \"name\": \"UNICONFIG_commit\",\n        \"version\": 1\n      },\n      \"optional\": false\n    },\n    {\n      \"name\": \"decide_task\",\n      \"taskReferenceName\": \"decide1\",\n      \"inputParameters\": {\n        \"case_value_param\": \"${uniconfig_commit_ref_RXFF.output.response_body.output.overall-configuration-status}\"\n      },\n      \"type\": \"DECISION\",\n      \"caseValueParam\": \"case_value_param\",\n      \"decisionCases\": {\n        \"fail\": [\n          {\n            \"name\": \"Post_to_Slack\",\n            \"taskReferenceName\": \"post_to_slack_ref_2EQD\",\n            \"type\": \"SUB_WORKFLOW\",\n            \"startDelay\": 0,\n            \"subWorkflowParam\": {\n              \"name\": \"Post_to_Slack\",\n              \"version\": 1\n            },\n            \"optional\": false\n          }\n        ],\n        \"complete\": [\n          {\n            \"name\": \"Post_to_Slack\",\n            \"taskReferenceName\": \"post_to_slack_ref_FW4E\",\n            \"type\": \"SUB_WORKFLOW\",\n            \"startDelay\": 0,\n            \"subWorkflowParam\": {\n              \"name\": \"Post_to_Slack\",\n              \"version\": 1\n            },\n            \"optional\": false\n          }\n        ]\n      },\n      \"startDelay\": 0,\n      \"optional\": false\n    },\n    {\n      \"name\": \"Read_journal_cli_device\",\n      \"taskReferenceName\": \"read_journal_cli_device_ref_LJUO\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.node01}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"startDelay\": 0,\n      \"subWorkflowParam\": {\n        \"name\": \"Read_journal_cli_device\",\n        \"version\": 1\n      },\n      \"optional\": false\n    },\n    {\n      \"name\": \"Read_journal_cli_device\",\n      \"taskReferenceName\": \"read_journal_cli_device_ref_CDGP\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.node02}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"startDelay\": 0,\n      \"subWorkflowParam\": {\n        \"name\": \"Read_journal_cli_device\",\n        \"version\": 1\n      },\n      \"optional\": false\n    }\n  ],\n  \"inputParameters\": [\n    \"node01[First node of P2P connection #node_id][IOS01]\",\n    \"interface01[Customer facing service interface on first node][GigabitEthernet1]\",\n    \"node02[Second node of P2P connection #node_id][IOS02]\",\n    \"interface02[Customer facing service interface on second node][GigabitEthernet3]\",\n    \"VCID[Virtual Circuit Identifier (globally unique)][444]\",\n    \"devices[Scoped devices][IOS01, IOS02]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"Journal for ${workflow.input.node01}:  ${read_journal_cli_device_ref_LJUO.output.journal} --------  Journal for ${workflow.input.node02}:  ${read_journal_cli_device_ref_CDGP.output.journal}\"\n  },\n  \"schemaVersion\": 2,\n  \"restartable\": true,\n  \"workflowStatusListenerEnabled\": false\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll create local",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_local_network_instance\",\n  \"description\": \"Create vll local network instance on a single device - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_device_create_local\",\n      \"taskReferenceName\": \"VLL_device_create_local\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"service_id\": \"${workflow.input.service_id}\",\n\t\t\"mtu\": \"${workflow.input.mtu}\",\n        \"interface_1\": \"${workflow.input.interface_1}\",\n        \"vlan_1\": \"${workflow.input.vlan_1}\",\n        \"interface_2\": \"${workflow.input.interface_2}\",\n        \"vlan_2\": \"${workflow.input.vlan_2}\"\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_device_create_local.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll create remote",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_remote_network_instance\",\n  \"description\": \"Create vll remote network instance on a single device - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_device_create_remote\",\n      \"taskReferenceName\": \"VLL_device_create_remote\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"service_id\": \"${workflow.input.service_id}\",\n\t\t\"mtu\": \"${workflow.input.mtu}\",\n\t\t\"vccid\": \"${workflow.input.vccid}\",\n        \"interface\": \"${workflow.input.interface}\",\n\t\t\"remote_ip\": \"${workflow.input.remote_ip}\",\n        \"vlan\": \"${workflow.input.vlan}\"\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_device_create_remote.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll read",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_vll_network_instance\",\n  \"description\": \"Read vll network instance for a single device - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_device_read\",\n      \"taskReferenceName\": \"VLL_device_read\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"service_id\": \"${workflow.input.service_id}\"\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_device_read.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll delete",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Delete_vll_network_instance\",\n  \"description\": \"Delete vll network instance from a single device - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_device_delete\",\n      \"taskReferenceName\": \"VLL_device_delete\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n        \"service_id\": \"${workflow.input.service_id}\"\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_device_delete.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll service create",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_service\",\n  \"description\": \"Create vll service spanning 2 devices - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_service_create\",\n      \"taskReferenceName\": \"VLL_service_create\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"service\": \"${workflow.input.service}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_service_create.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll service create dryrun",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_service_dryrun\",\n  \"description\": \"Create vll service spanning 2 devices also invoking dryrun - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_service_dryrun\",\n      \"taskReferenceName\": \"VLL_service_dryrun\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"service\": \"${workflow.input.service}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_service_dryrun.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll service create commit",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_service_commit\",\n  \"description\": \"Create vll service spanning 2 devices also invoking commit - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_service_commit\",\n      \"taskReferenceName\": \"VLL_service_commit\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"service\": \"${workflow.input.service}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_service_commit.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll service create template",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_service_from_template\",\n  \"description\": \"Create vll service spanning 2 devices from template - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_service_create\",\n      \"taskReferenceName\": \"VLL_service_create\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t        \"service\": { \n\t\t\t\t\"id\": \"${workflow.input.service_id}\", \n\t\t\t\t\"vccid\": \"${workflow.input.vccid}\",\n\t\t\t\t\"mtu\": \"${workflow.input.mtu}\",\n\t\t\t\t\"debug\": false,\n\t\t\t\t\"devices\": [\n\t\t\t        {\n\t\t\t        \t\"id\": \"${workflow.input.device_1}\", \n\t\t\t        \t\"interface\": \"${workflow.input.interface_1}\", \n\t\t\t        \t\"interface_reset\": false,\n\t\t\t        \t\"remote_ip\": \"${workflow.input.remote_ip_1}\"\n\t\t\t        },\n\t\t\t        {\n\t\t\t        \t\"id\": \"${workflow.input.device_2}\", \n\t\t\t        \t\"interface\": \"${workflow.input.interface_2}\", \n\t\t\t        \t\"interface_reset\": false,\n\t\t\t        \t\"remote_ip\": \"${workflow.input.remote_ip_2}\"\n\t\t\t        }\n\t\t\t    ]\n\t\t\t}\t\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"device_1[device_1 id. Example: IOS01 #node_id]\",\n    \"device_2[device_2 id. Example: IOS02 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_service_create.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll service create template dryrun",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_service_dryrun_from_template\",\n  \"description\": \"Create vll service spanning 2 devices from template also invoking dryrun - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_service_dryrun\",\n      \"taskReferenceName\": \"VLL_service_dryrun\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t        \"service\": { \n\t\t\t\"id\": \"${workflow.input.service_id}\", \n\t\t\t\"vccid\": \"${workflow.input.vccid}\",\n\t\t\t\"mtu\": \"${workflow.input.mtu}\",\n\t\t\t\"debug\": false,\n\t\t\t\"devices\": [\n\t\t        {\n\t\t        \t\"id\": \"${workflow.input.device_1}\", \n\t\t        \t\"interface\": \"${workflow.input.interface_1}\", \n\t\t        \t\"interface_reset\": false,\n\t\t        \t\"remote_ip\": \"${workflow.input.remote_ip_1}\"\n\t\t        },\n\t\t        {\n\t\t        \t\"id\": \"${workflow.input.device_2}\", \n\t\t        \t\"interface\": \"${workflow.input.interface_2}\", \n\t\t        \t\"interface_reset\": false,\n\t\t        \t\"remote_ip\": \"${workflow.input.remote_ip_2}\"\n\t\t        }\n\t\t    ]\n\t\t}\t\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"device_1[device_1 id. Example: IOS01 #node_id]\",\n    \"device_2[device_2 id. Example: IOS02 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_service_dryrun.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vll service create template commit",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Create_vll_service_commit_from_template\",\n  \"description\": \"Create vll service spanning 2 devices from template also invoking commit - OPENCONFIG, UNICONFIG, VLL, L2VPN\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"VLL_service_commit\",\n      \"taskReferenceName\": \"VLL_service_commit\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t        \"service\": { \n\t\t\t\"id\": \"${workflow.input.service_id}\", \n\t\t\t\"vccid\": \"${workflow.input.vccid}\",\n\t\t\t\"mtu\": \"${workflow.input.mtu}\",\n\t\t\t\"debug\": false,\n\t\t\t\"devices\": [\n\t\t        {\n\t\t        \t\"id\": \"${workflow.input.device_1}\", \n\t\t        \t\"interface\": \"${workflow.input.interface_1}\", \n\t\t        \t\"interface_reset\": false,\n\t\t        \t\"remote_ip\": \"${workflow.input.remote_ip_1}\"\n\t\t        },\n\t\t        {\n\t\t        \t\"id\": \"${workflow.input.device_2}\", \n\t\t        \t\"interface\": \"${workflow.input.interface_2}\", \n\t\t        \t\"interface_reset\": false,\n\t\t        \t\"remote_ip\": \"${workflow.input.remote_ip_2}\"\n\t\t        }\n\t\t    ]\n\t\t}\t\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"device_1[device_1 id. Example: IOS01 #node_id]\",\n    \"device_2[device_2 id. Example: IOS02 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${VLL_service_commit.output}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UTILS",
					"item": [
						{
							"name": "Dynamic fork",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Dynamic_fork\",\n  \"description\": \"A dynamic fork + join task - UTILS\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n\t  \"name\": \"dynamic_fork\",\n\t  \"taskReferenceName\": \"fork\",\n\t  \"inputParameters\": {\n\t     \"dynamic_tasks\": \"${workflow.input.dynamic_tasks}\",\n\t     \"dynamic_tasks_i\": \"${workflow.input.dynamic_tasks_i}\"\n\t  },\n\t  \"type\": \"FORK_JOIN_DYNAMIC\",\n\t  \"dynamicForkTasksParam\": \"dynamic_tasks\",\n\t  \"dynamicForkTasksInputParamName\": \"dynamic_tasks_i\"\n\t},\n\t{\n      \"name\": \"join\",\n      \"taskReferenceName\": \"join\",\n      \"type\": \"JOIN\"\n    }\n  ],\n  \"outputParameters\": {\n    \"forkedTasks\": \"${fork.input.forkedTasks}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UNIFIED",
					"item": [
						{
							"name": "Read unified topology oper",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_unified_topology_operational\",\n  \"description\": \"Read operational state of Unified - UNIFIED, OPER\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNIFIED_read_unified_topology_operational\",\n      \"taskReferenceName\": \"UNIFIED_read_unified_topology_operational\",\n      \"type\": \"SIMPLE\"\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${UNIFIED_read_unified_topology_operational.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all devices as tasks",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Get_all_devices_in_unified_as_tasks\",\n  \"description\": \"get all devices in unified topology as workflow tasks - UNIFIED\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"UNIFIED_get_all_devices_as_tasks\",\n      \"taskReferenceName\": \"UNIFIED_get_all_devices_as_tasks\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t\t\"task\": \"${workflow.input.task}\",\n\t\t\"task_params\": \"${workflow.input.task_params}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"dynamic_tasks_i\": \"${UNIFIED_get_all_devices_as_tasks.output.dynamic_tasks_i}\",\n    \"dynamic_tasks\": \"${UNIFIED_get_all_devices_as_tasks.output.dynamic_tasks}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Read structured data for device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_structured_device_data_in_unified\",\n  \"description\": \"Read device configuration or operational data in structured format e.g. openconfig - UNIFIED, CONFIG, OPER\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNIFIED_read_structured_device_data\",\n      \"taskReferenceName\": \"UNIFIED_read_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"${workflow.input.uri}\"\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"data\": \"${UNIFIED_read_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Write structured data for device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Write_structured_device_data_in_unified\",\n  \"description\": \"Write device configuration data in structured format e.g. openconfig - UNIFIED, CONFIG\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNIFIED_write_structured_device_data\",\n      \"taskReferenceName\": \"UNIFIED_write_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"${workflow.input.uri}\",\n\t\t\"template\": \"${workflow.input.template}\",\n\t\t\"params\": \"${workflow.input.params}\"\n      }\n    }\n  ],\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNIFIED_write_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete structured data for device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Delete_structured_device_data_in_unified\",\n  \"description\": \"Delete device configuration data in structured format e.g. openconfig - UNIFIED, CONFIG\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNIFIED_delete_structured_device_data\",\n      \"taskReferenceName\": \"UNIFIED_delete_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"${workflow.input.uri}\"\n\t  }\n    }\n  ],\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNIFIED_delete_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "UNICONFIG",
					"item": [
						{
							"name": "Read uniconfig topology oper",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_uniconfig_topology_operational\",\n  \"description\": \"Read operational state of Uniconfig - UNICONFIG, OPER\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_read_unified_topology_operational\",\n      \"taskReferenceName\": \"UNICONFIG_read_unified_topology_operational\",\n      \"type\": \"SIMPLE\"\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${UNIFIED_read_unified_topology_operational.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read uniconfig topology config",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_uniconfig_topology_config\",\n  \"description\": \"Read config state of Uniconfig - UNICONFIG, CONFIG\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_read_unified_topology_config\",\n      \"taskReferenceName\": \"UNICONFIG_read_unified_topology_config\",\n      \"type\": \"SIMPLE\"\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${UNIFIED_read_unified_topology_config.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all devices as tasks",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Get_all_devices_as_tasks_in_uniconfig\",\n  \"description\": \"get all devices in uniconfig topology as workflow tasks - UNICONFIG\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"UNICONFIG_get_all_devices_as_tasks\",\n      \"taskReferenceName\": \"UNICONFIG_get_all_devices_as_tasks\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n\t\t\"task\": \"${workflow.input.task}\",\n\t\t\"task_params\": \"${workflow.input.task_params}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"dynamic_tasks_i\": \"${UNICONFIG_get_all_devices_as_tasks.output.dynamic_tasks_i}\",\n    \"dynamic_tasks\": \"${UNICONFIG_get_all_devices_as_tasks.output.dynamic_tasks}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "This requires an http server at 172.17.0.1:9999 serving following file:\n\n{\n  \"id\": \"ios2\",\n  \"host\": \"192.168.1.254\",\n  \"type\": \"ios\",\n  \"version\" : \"*\",\n  \"protocol\": \"ssh\",\n  \"port\": 22,\n  \"username\": \"cisco\",\n  \"password\": \"cisco\"\n}\n\n\nto do that on linux:\n\nwhile :\ndo\n\t{ echo -ne \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; cat content.json; } | nc -l -p 9999\ndone"
							},
							"response": []
						},
						{
							"name": "Read structured data for device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_structured_device_data_in_uniconfig\",\n  \"description\": \"Read device configuration or operational data in structured format e.g. openconfig - UNICONFIG, OPER, CONFIG\",\n  \"version\": 1,\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_read_structured_device_data\",\n      \"taskReferenceName\": \"UNICONFIG_read_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"${workflow.input.uri}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"data\": \"${UNICONFIG_read_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Write structured data for device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Write_structured_device_data_in_uniconfig\",\n  \"description\": \"Write device configuration data in structured format e.g. openconfig - UNICONFIG, CONFIG\",\n  \"version\": 1,\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_write_structured_device_data\",\n      \"taskReferenceName\": \"UNICONFIG_write_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"${workflow.input.uri}\",\n\t\t\"template\": \"${workflow.input.template}\",\n\t\t\"params\": \"${workflow.input.params}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_write_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete structured data for device",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Delete_structured_device_data_in_uniconfig\",\n  \"description\": \"Delete device configuration data in structured format e.g. openconfig - UNICONFIG, CONFIG\",\n  \"version\": 1,\n  \"inputParameters\": [\n    \"id[device id. Example: IOS01 #node_id]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_delete_structured_device_data\",\n      \"taskReferenceName\": \"UNICONFIG_delete_structured_device_data\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"uri\": \"${workflow.input.uri}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_delete_structured_device_data.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Commit",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_commit\",\n  \"description\": \"Commit uniconfig - UNICONFIG\",\n  \"version\": 1,\n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_commit\",\n      \"taskReferenceName\": \"UNICONFIG_commit\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_commit.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Calc diff",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_calculate_diff\",\n  \"description\": \"Calculate uniconfig diff - UNICONFIG\",\n  \"version\": 1,  \n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_calculate_diff\",\n      \"taskReferenceName\": \"UNICONFIG_calculate_diff\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_calculate_diff.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync from network",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_sync_from_network\",\n  \"description\": \"Sync uniconfig from network - UNICONFIG\",\n  \"version\": 1,  \n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_sync_from_network\",\n      \"taskReferenceName\": \"UNICONFIG_sync_from_network\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_sync_from_network.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dryrun commit",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_dryrun_commit\",\n  \"description\": \"Dryrun Commit uniconfig - UNICONFIG\",\n  \"version\": 1,  \n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_dryrun_commit\",\n      \"taskReferenceName\": \"UNICONFIG_dryrun_commit\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_dryrun_commit.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with oper",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_replace_config_with_oper\",\n  \"description\": \"Replace config with oper in uniconfig - UNICONFIG\",\n  \"version\": 1,  \n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_replace_config_with_oper\",\n      \"taskReferenceName\": \"UNICONFIG_replace_config_with_oper\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"devices\": \"${workflow.input.devices}\"\n\t  }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_replace_config_with_oper.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create snapshot",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_create_snapshot\",\n  \"description\": \"Create snapshot in uniconfig - UNICONFIG, SNAP\",\n  \"version\": 1,  \n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_create_snapshot\",\n      \"taskReferenceName\": \"UNICONFIG_create_snapshot\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n      \t\"name\": \"${workflow.input.name}\",\n        \"devices\": \"${workflow.input.devices}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_create_snapshot.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete snapshot",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_delete_snapshot\",\n  \"description\": \"Delete snapshot in uniconfig - UNICONFIG, SNAP\",\n  \"version\": 1,  \n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_delete_snapshot\",\n      \"taskReferenceName\": \"UNICONFIG_delete_snapshot\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n      \t\"name\": \"${workflow.input.name}\",\n        \"devices\": \"${workflow.input.devices}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_delete_snapshot.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace config with snapshot",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"UNICONFIG_delete_snapshot\",\n  \"description\": \"Delete snapshot in uniconfig - UNICONFIG, SNAP\",\n  \"version\": 1,  \n  \"inputParameters\": [\n    \"devices[List of devices to be committed. This is a mandatory parameter. Example: IOS01, IOS02 #node_ids]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"UNICONFIG_delete_snapshot\",\n      \"taskReferenceName\": \"UNICONFIG_delete_snapshot\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n      \t\"name\": \"${workflow.input.name}\",\n        \"devices\": \"${workflow.input.devices}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response_body\": \"${UNICONFIG_delete_snapshot.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LLDP",
					"item": [
						{
							"name": "Add LLDP build",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Build_LLDP_topology\",\n  \"description\": \"Build lldp topology - LLDP\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"node_aggregation[Which unique attribute of a device to use in order to identify a device. This reduces node duplicity][system-name]\",\n\t\"link_aggregation[Which unique attribute of a link to use in order to identify a device e.g. source and destination interfaces][bidirectional-abbreviations]\",\n\t\"per_node_read_timeout[Max time to spend on 1 device in seconds][30]\",\n\t\"concurrent_read_nodes[How many devices to query in parallel][8]\",\n\t\"destination_topology[Name of a topology under which the result will be stored][lldp]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"LLDP_build_topology\",\n      \"taskReferenceName\": \"LLDP_build_topology\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"node-aggregation\": \"${workflow.input.node_aggregation}\",\n\t\t\"link-aggregation\": \"${workflow.input.link_aggregation}\",\n        \"per-node-read-timeout\": \"${workflow.input.per_node_read_timeout}\",\n        \"concurrent-read-nodes\": \"${workflow.input.concurrent_read_nodes}\",\n        \"destination-topology\": \"${workflow.input.destination_topology}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response\": \"${LLDP_build_topology.output.response_body}\",\n    \"request\": \"${LLDP_build_topology.output.request_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add LLDP read",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Read_LLDP_topology\",\n  \"description\": \"Read lldp topology - LLDP\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"destination_topology[Name of a topology to read][lldp]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"LLDP_read_topology\",\n      \"taskReferenceName\": \"LLDP_read_topology\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"destination-topology\": \"${workflow.input.destination_topology}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response\": \"${LLDP_read_topology.output.response_body}\",\n    \"request\": \"${LLDP_read_topology.output.request_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add LLDP export",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Export_LLDP_topology\",\n  \"description\": \"Export lldp topology - LLDP\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"LLDP_export_topology\",\n      \"taskReferenceName\": \"LLDP_export_topology\",\n      \"type\": \"SIMPLE\"\n    }\n  ],\n  \"outputParameters\": {\n    \"export\": \"${LLDP_export_topology.output.response_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add LLDP store",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Store_LLDP_topology\",\n  \"description\": \"Store lldp topology in database - LLDP\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"destination_topology[Name of a topology to read][lldp]\",\n\t\"content[Actual topology content]\"\n  ],\n  \"tasks\": [\n    {\n      \"name\": \"LLDP_store_topology\",\n      \"taskReferenceName\": \"LLDP_store_topology\",\n      \"type\": \"SIMPLE\",\n      \"inputParameters\": {\n        \"destination-topology\": \"${workflow.input.destination_topology}\",\n        \"content\": \"${workflow.input.content}\"\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"response\": \"${LLDP_store_topology.output.response_body}\",\n    \"request\": \"${LLDP_store_topology.output.request_body}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add LLDP Build and store",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Build_read_store_LLDP_topology\",\n  \"description\": \"Build, read and store LLDP topology in database - LLDP\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"node_aggregation[Which unique attribute of a device to use in order to identify a device. This reduces node duplicity][system-name]\",\n\t\"link_aggregation[Which unique attribute of a link to use in order to identify a device e.g. source and destination interfaces][bidirectional-abbreviations]\",\n\t\"per_node_read_timeout[Max time to spend on 1 device in seconds][30]\",\n\t\"concurrent_read_nodes[How many devices to query in parallel][8]\",\n\t\"destination_topology[Name of a topology under which the result will be stored][lldp]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_build\",\n      \"taskReferenceName\": \"build\",\n\t  \"inputParameters\": {\n        \"node_aggregation\": \"${workflow.input.node_aggregation}\",\n\t\t\"link_aggregation\": \"${workflow.input.link_aggregation}\",\n        \"per_node_read_timeout\": \"${workflow.input.per_node_read_timeout}\",\n        \"concurrent_read_nodes\": \"${workflow.input.concurrent_read_nodes}\",\n        \"destination_topology\": \"${workflow.input.destination_topology}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Build_LLDP_topology\",\n        \"version\": 1\n      }\n    },\n  \t{\n      \"name\": \"sub_read\",\n      \"taskReferenceName\": \"read\",\n\t  \"inputParameters\": {\n        \"destination_topology\": \"${workflow.input.destination_topology}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Read_LLDP_topology\",\n        \"version\": 1\n      }\n    },\n    {\n      \"name\": \"sub_store\",\n      \"taskReferenceName\": \"store\",\n\t  \"inputParameters\": {\n        \"destination_topology\": \"${workflow.input.destination_topology}\",\n        \"content\": \"${read.output.response.topology}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Store_LLDP_topology\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"destination-topology\": \"${workflow.input.destination_topology}\",\n    \"content\": \"${read.output.response.topology}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add EXAMPLE add sample device to inventory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Add_leafspine_device\",\n  \"description\": \"add a router from sample leaf spine topology - EXAMPLE\",\n  \"version\": 1,\n  \"inputParameters\": [\n\t\"id[Device ID][L1]\",\n\t\"type[All devices in sample-topology are IOS][ios]\",\n\t\"version[All devices in sample-topology are version 15.2][15.2]\",\n\t\"host[Sample topology fixed hostname][sample-topology]\",\n\t\"protocol[Only ssh available in sample-topology][ssh]\",\n\t\"port[11000 - L1, 11001 - L2, 11002 - L3, 11003 - L4, 11004 - L5, 12000 - S1, 12001 - S2][11000]\",\n\t\"username[Username credential][cisco]\",\n\t\"password[Password credential][cisco]\"\n  ],\n  \"tasks\": [\n  \t{\n      \"name\": \"sub_add\",\n      \"taskReferenceName\": \"add\",\n      \"inputParameters\": {\n        \"id\": \"${workflow.input.id}\",\n\t\t\"type\": \"${workflow.input.type}\",\n        \"version\": \"${workflow.input.version}\",\n        \"host\": \"${workflow.input.host}\",\n        \"protocol\": \"${workflow.input.protocol}\",\n        \"port\": \"${workflow.input.port}\",\n        \"username\": \"${workflow.input.username}\",\n        \"password\": \"${workflow.input.password}\"\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"subWorkflowParam\": {\n        \"name\": \"Add_cli_device_to_inventory\",\n        \"version\": 1\n      }\n    }\n  ],\n  \"outputParameters\": {\n    \"id\": \"${add.input.id}\"\n  },\n  \"schemaVersion\": 2\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LACP",
					"item": [
						{
							"name": "LCAP demo",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"name\": \"Link_aggregation\",\n  \"description\": \"Creates a link aggregation between two nodes - LACP, DEMO\",\n  \"version\": 1,\n  \"tasks\": [\n  \t{\n        \"name\": \"fork_join\",\n        \"taskReferenceName\": \"forkx\",\n        \"type\": \"FORK_JOIN\",\n        \"forkTasks\": [\n\t  \t[\n\t\t    {\n\t\t      \"name\": \"UNICONFIG_write_structured_device_data\",\n\t\t      \"taskReferenceName\": \"UNICONFIG_write_bundle_ether_node1\",\n\t\t      \"inputParameters\": {\n\t\t        \"id\": \"${workflow.input.node1}\",\n\t\t        \"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether${workflow.input.bundle_ether_id}\",\n\t\t        \"template\": \"{\\\"interface\\\":[{\\\"name\\\":\\\"Bundle-Ether${workflow.input.bundle_ether_id}\\\",\\\"config\\\":{\\\"type\\\":\\\"iana-if-type:ieee8023adLag\\\",\\\"enabled\\\":${workflow.input.bundle_ether_enabled},\\\"name\\\":\\\"Bundle-Ether${workflow.input.bundle_ether_id}\\\"}}]}\",\n\t\t        \"params\": \"{}\"\n\t\t      },\n\t\t      \"type\": \"SIMPLE\",\n\t\t      \"startDelay\": 0\n\t\t    }\n\t\t],\n\t\t[\n\t\t    {\n\t\t      \"name\": \"UNICONFIG_write_structured_device_data\",\n\t\t      \"taskReferenceName\": \"UNICONFIG_write_bundle_ether_node2\",\n\t\t      \"inputParameters\": {\n\t\t        \"id\": \"${workflow.input.node2}\",\n\t\t        \"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether${workflow.input.bundle_ether_id}\",\n\t\t        \"template\": \"{\\\"interface\\\":[{\\\"name\\\":\\\"Bundle-Ether${workflow.input.bundle_ether_id}\\\",\\\"config\\\":{\\\"type\\\":\\\"iana-if-type:ieee8023adLag\\\",\\\"enabled\\\":${workflow.input.bundle_ether_enabled},\\\"name\\\":\\\"Bundle-Ether${workflow.input.bundle_ether_id}\\\"}}]}\",\n\t\t        \"params\": \"{}\"\n\t\t      },\n\t\t      \"type\": \"SIMPLE\",\n\t\t      \"startDelay\": 0\n\t\t    }\n\t    ]\n\t  ]\n  \t},\n    {\n        \"name\": \"join\",\n        \"taskReferenceName\": \"join1\",\n        \"type\": \"JOIN\",\n        \"joinOn\": [\n          \"UNICONFIG_write_bundle_ether_node1\",\n          \"UNICONFIG_write_bundle_ether_node2\"\n        ]\n    },\n    {\n        \"name\": \"fork_join\",\n        \"taskReferenceName\": \"forky\",\n        \"type\": \"FORK_JOIN\",\n        \"forkTasks\": [\n\t  \t[\n\t  \t\t{\n\t\t      \"name\": \"UNICONFIG_write_structured_data_as_tasks\",\n\t\t      \"taskReferenceName\": \"UNICONFIG_write_structured_data_as_tasks_node1\",\n\t\t      \"inputParameters\": {\n\t\t        \"id\": \"${workflow.input.node1}\",\n\t\t        \"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/$iface\",\n\t\t        \"template\": \"{\\\"interface\\\":[{\\\"name\\\":\\\"$iface\\\",\\\"config\\\":{\\\"type\\\":\\\"iana-if-type:ethernetCsmacd\\\",\\\"name\\\":\\\"$iface\\\"},\\\"frinx-openconfig-if-ethernet:ethernet\\\":{\\\"config\\\":{\\\"frinx-openconfig-if-aggregate:aggregate-id\\\": \\\"Bundle-Ether${workflow.input.bundle_ether_id}\\\"}}}]}\",\n\t\t        \"task_params\": \"${workflow.input.node1_ifaces}\"\n\t\t      },\n\t\t      \"type\": \"SIMPLE\",\n\t\t      \"startDelay\": 0\n\t\t    },\n\t\t    {\n\t\t\t  \"name\": \"sub_write\",\n\t\t\t  \"taskReferenceName\": \"write1\",\n\t\t\t  \"inputParameters\": {\n\t\t\t     \"dynamic_tasks\": \"${UNICONFIG_write_structured_data_as_tasks_node1.output.dynamic_tasks}\",\n\t\t\t     \"dynamic_tasks_i\": \"${UNICONFIG_write_structured_data_as_tasks_node1.output.dynamic_tasks_i}\"\n\t\t\t  },\n\t\t\t  \"type\": \"SUB_WORKFLOW\",\n\t\t\t  \"start-delay\": 0,\n\t\t\t  \"subWorkflowParam\": {\n\t\t        \"name\": \"Dynamic_fork\",\n\t\t        \"version\": 1\n\t\t      }\n\t\t\t}\n\t\t],\n\t\t[\n\t\t    {\n\t\t      \"name\": \"UNICONFIG_write_structured_data_as_tasks\",\n\t\t      \"taskReferenceName\": \"UNICONFIG_write_structured_data_as_tasks_node2\",\n\t\t      \"inputParameters\": {\n\t\t        \"id\": \"${workflow.input.node2}\",\n\t\t        \"uri\": \"/frinx-openconfig-interfaces:interfaces/interface/$iface\",\n\t\t        \"template\": \"{\\\"interface\\\":[{\\\"name\\\":\\\"$iface\\\",\\\"config\\\":{\\\"type\\\":\\\"iana-if-type:ethernetCsmacd\\\",\\\"name\\\":\\\"$iface\\\"},\\\"frinx-openconfig-if-ethernet:ethernet\\\":{\\\"config\\\":{\\\"frinx-openconfig-if-aggregate:aggregate-id\\\": \\\"Bundle-Ether${workflow.input.bundle_ether_id}\\\"}}}]}\",\n\t\t        \"task_params\": \"${workflow.input.node2_ifaces}\"\n\t\t      },\n\t\t      \"type\": \"SIMPLE\",\n\t\t      \"startDelay\": 0\n\t\t    },\n    \t\t{\n\t\t\t  \"name\": \"sub_write\",\n\t\t\t  \"taskReferenceName\": \"write2\",\n\t\t\t  \"inputParameters\": {\n\t\t\t     \"dynamic_tasks\": \"${UNICONFIG_write_structured_data_as_tasks_node2.output.dynamic_tasks}\",\n\t\t\t     \"dynamic_tasks_i\": \"${UNICONFIG_write_structured_data_as_tasks_node2.output.dynamic_tasks_i}\"\n\t\t\t  },\n\t\t\t  \"type\": \"SUB_WORKFLOW\",\n\t\t\t  \"start-delay\": 0,\n\t\t\t  \"subWorkflowParam\": {\n\t\t        \"name\": \"Dynamic_fork\",\n\t\t        \"version\": 1\n\t\t      }\n\t\t\t}\n\t\t]\n\t  ]\n    },\n    {\n        \"name\": \"join\",\n        \"taskReferenceName\": \"join2\",\n        \"type\": \"JOIN\",\n        \"joinOn\": [\n          \"write1\",\n          \"write2\"\n        ]\n    },\n    {\n      \"name\": \"UNICONFIG_commit\",\n      \"taskReferenceName\": \"UNICONFIG_commit_ifaces\",\n      \"type\": \"SIMPLE\",\n      \"startDelay\": 0\n    }\n   ],\n  \"inputParameters\": [\n  \t\"bundle_ether_id[BundleEtherX][1]\",\n  \t\"enabled[enabled][true]\",\n    \"node1[First node to create a link aggregation with #node_id][]\",\n    \"node2[Second node to create a link aggregation with #node_id][]\",\n    \"node1_ifaces[Interfaces for node1][[\\\"GigabitEthernet0/0/0/0\\\", \\\"GigabitEthernet0/0/0/1\\\"]]\",\n    \"node2_ifaces[Interfaces for node2][[\\\"GigabitEthernet0/0/0/1\\\", \\\"GigabitEthernet0/0/0/2\\\", \\\"GigabitEthernet0/0/0/3\\\"]]\"\n  ],    \n  \"outputParameters\": {\n    \"Aggregation link ID\": \"${workflow.input.bundle_ether_id}\"\n  },\n  \"restartable\": true,\n  \"schemaVersion\": 2\n}\n]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								},
								"description": "LCAP demo"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "HTTP",
					"item": [
						{
							"name": "HTTP Get",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n      \"name\": \"HTTP_GET_generic\",\n      \"description\": \"GENERIC HTTP GET workflow\",\n      \"version\": 1,\n      \"tasks\": [\n           {\n              \"name\": \"http_get_generic\",\n              \"taskReferenceName\": \"http_get_generic_instance\",\n              \"inputParameters\": {\n                \"http_request\": {\n                  \"uri\": \"${workflow.input.uri}\",\n                  \"method\": \"GET\",\n                  \"contentType\": \"application/json\",\n                  \"accept\": \"application/json\",\n                  \"connectionTimeOut\":\"3600\",\n                 \"readTimeOut\":\"3600\"\n                }\n              },\n              \"type\": \"HTTP\",\n              \"startDelay\": 0\n          }\n      ],\n      \"inputParameters\": [\n          \"uri[URI of HTTP request e.g. http://ip.jsontest.com/][http://ip.jsontest.com/]\"\n      ],\n      \"outputParameters\": {\n        \"response_body\": \"${http_get_generic_instance.output.response.body}\"\n      },\n      \"schemaVersion\": 2\n    }]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "HTTP Delete",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n      \"name\": \"HTTP_DELETE_generic\",\n      \"description\": \"GENERIC HTTP DELETE workflow\",\n      \"version\": 1,\n      \"tasks\": [\n           {\n              \"name\": \"http_get_generic\",\n              \"taskReferenceName\": \"http_get_generic_instance\",\n              \"inputParameters\": {\n                \"http_request\": {\n                  \"uri\": \"${workflow.input.uri}\",\n                  \"method\": \"DELETE\",\n                  \"contentType\": \"application/json\",\n                  \"accept\": \"application/json\",\n                  \"connectionTimeOut\":\"3600\",\n                 \"readTimeOut\":\"3600\"\n                }\n              },\n              \"type\": \"HTTP\",\n              \"startDelay\": 0\n          }\n      ],\n      \"inputParameters\": [\n          \"uri[URI of HTTP request e.g. http://ip.jsontest.com/][http://ip.jsontest.com/]\"\n      ],\n      \"outputParameters\": {\n        \"response_body\": \"${http_get_generic_instance.output.response.body}\"\n      },\n      \"schemaVersion\": 2\n    }]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "HTTP Post",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n      \"name\": \"HTTP_POST_generic\",\n      \"description\": \"GENERIC HTTP POST workflow\",\n      \"version\": 1,\n      \"tasks\": [ \n         {\n              \"name\": \"http_get_generic\",\n              \"taskReferenceName\": \"http_get_generic_instance\",\n              \"inputParameters\": {\n                \"http_request\": {\n                  \"uri\": \"${workflow.input.uri}\",\n                  \"method\": \"POST\",\n                  \"contentType\": \"application/json\",\n                  \"body\": \"${workflow.input.template}\",\n                  \"connectionTimeOut\":\"3600\",\n                  \"readTimeOut\":\"3600\"\n                }\n              },\n              \"type\": \"HTTP\",\n              \"startDelay\": 0\n          }\n      ],\n      \"inputParameters\": [\n        \"uri[URI of HTTP request][https://hooks.slack.com/services/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]\",\n        \"template[Body of HTTP request][{\\\"text\\\":\\\"sample POST message from http get workflow.\\\"}]\"\n      ],\n      \"outputParameters\": {\n        \"response_body\": \"${http_get_generic_instance.output.response.body}\"\n      },\n      \"schemaVersion\": 2\n    }]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "HTTP Put",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n      \"name\": \"HTTP_PUT_generic\",\n      \"description\": \"GENERIC HTTP PUT workflow\",\n      \"version\": 1,\n      \"tasks\": [\n           {\n              \"name\": \"http_get_generic\",\n              \"taskReferenceName\": \"http_get_generic_instance\",\n              \"inputParameters\": {\n                \"http_request\": {\n                  \"uri\": \"${workflow.input.uri}\",\n                  \"method\": \"PUT\",\n                  \"contentType\": \"application/json\",\n                  \"body\": \"${workflow.input.template}\",\n                  \"connectionTimeOut\":\"3600\",\n                 \"readTimeOut\":\"3600\"\n                }\n              },\n              \"type\": \"HTTP\",\n              \"startDelay\": 0\n          }\n      ],\n      \"inputParameters\": [\n        \"template[Body of HTTP request][{\\\"text\\\":\\\"sample PUT message from http get workflow.\\\"}]\",\n        \"uri[URI of HTTP request][https://hooks.slack.com/services/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]\"\n      ],\n      \"outputParameters\": {\n        \"response_body\": \"${http_get_generic_instance.output.response.body}\"\n      },\n      \"schemaVersion\": 2\n    }]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post to Slack",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"name\": \"Post_to_Slack\",\n  \"version\": 1,\n  \"tasks\": [\n    {\n      \"name\": \"HTTP_POST_generic\",\n      \"taskReferenceName\": \"http_post_generic_ref_6EHC\",\n      \"inputParameters\": {\n        \"uri\": \"https://hooks.slack.com/services/${workflow.input.uri}\",\n        \"template\": {\n          \"text\": \"Message from http POST workflow.\"\n        }\n      },\n      \"type\": \"SUB_WORKFLOW\",\n      \"startDelay\": 0,\n      \"subWorkflowParam\": {\n        \"name\": \"HTTP_POST_generic\",\n        \"version\": 1\n      },\n      \"optional\": false\n    }\n  ],\n  \"inputParameters\": [\n    \"uri[URI hook][T7UQ7KATX/BP8M0S3EH/W3YpmbUr2fQDEA7WIoWcJIXX]\"\n  ],\n  \"schemaVersion\": 2,\n  \"restartable\": true,\n  \"workflowStatusListenerEnabled\": false\n}]"
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"metadata",
										"workflow"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a99a3022-4e44-4999-aa42-578e71efae42",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dd349c9c-5654-4957-9e79-52bea9a93730",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Test",
			"item": [
				{
					"name": "List All Tasks",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/metadata/taskdefs",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"metadata",
								"taskdefs"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Workflows",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/metadata/workflow",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"metadata",
								"workflow"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
