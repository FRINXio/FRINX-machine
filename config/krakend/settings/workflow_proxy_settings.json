{
    "endpoints": [
        {
            "endpoint": "/api/workflow/metadata/taskdefs",
            "method": "GET",
            "url_pattern": "/metadata/taskdefs"
        },
        {
            "endpoint": "/api/workflow/metadata/taskdefs",
            "method": "POST",
            "url_pattern": "/metadata/taskdefs"
        },
        {
            "endpoint": "/api/workflow/metadata/taskdefs",
            "method": "PUT",
            "url_pattern": "/metadata/taskdefs"
        },
        {
            "endpoint": "/api/workflow/metadata/taskdefs/{name}",
            "method": "GET",
            "url_pattern": "/metadata/taskdefs/{name}"
        },
        {
            "endpoint": "/api/workflow/metadata/taskdefs/{name}",
            "method": "DELETE",
            "url_pattern": "/metadata/taskdefs/{name}",
            "input_query_strings": [
                "archiveWorkflow"
              ]
        },
        {
            "endpoint": "/api/workflow/metadata/workflow",
            "method": "GET",
            "url_pattern": "/metadata/workflow"
        },
        {
            "endpoint": "/api/workflow/metadata/workflow",
            "method": "PUT",
            "url_pattern": "/metadata/workflow"
        },
        {
            "endpoint": "/api/workflow/metadata/workflow",
            "method": "POST",
            "url_pattern": "/metadata/workflow"
        },   
        {
            "endpoint": "/api/workflow/metadata/workflow/{name}",
            "method": "GET",
            "url_pattern": "/metadata/workflow/{name}",
            "input_query_strings": [
                "version"
              ]
        },
        {
            "endpoint": "/api/workflow/metadata/workflow/{name}/{version}",
            "method": "DELETE",
            "url_pattern": "/metadata/workflow/{name}/{version}"
        },
        {
            "endpoint": "/api/workflow/workflow/{a}",
            "method": "DELETE",
            "url_pattern": "/workflow/{a}"
        },
        {
            "endpoint": "/api/workflow/workflow/{a}/{b}",
            "method": "DELETE",
            "url_pattern": "/workflow/{a}/{b}"
        },
        {
            "endpoint": "/api/workflow/workflow",
            "method": "POST",
            "url_pattern": "/workflow"
        },
        {
            "endpoint": "/api/workflow/event",
            "method": "GET",
            "url_pattern": "/event"
        },
        {
            "endpoint": "/api/workflow/event",
            "method": "POST",
            "url_pattern": "/event"
        },
        {
            "endpoint": "/api/workflow/event/{name}",
            "method": "DELETE",
            "url_pattern": "/event/{name}"
        },
        {
            "endpoint": "/api/workflow/event/{event}",
            "method": "GET",
            "url_pattern": "/event/{event}"
        },
	    {
	        "endpoint": "/api/workflow/running/{workflowType}",
            "method": "GET",
            "url_pattern": "/workflow/running/{workflowType}",
                "input_query_strings": [
                "version", "startTime", "endTime"
            ]
	    },
        {
            "endpoint": "/api/workflow/id/{workflowId}",
            "method": "GET",
            "url_pattern": "/id/{workflowId}",
            "input_query_strings": [
                "includeTasks"
              ]
        },
        {
            "endpoint": "/api/workflow/schedule",
            "method": "GET",
            "url_pattern": "/schedule"
        },
        {
            "endpoint": "/api/workflow/schedule/{name}",
            "method": "GET",
            "url_pattern": "/schedule/{name}"
        },
        {
            "endpoint": "/api/workflow/schedule/{name}",
            "method": "PUT",
            "url_pattern": "/schedule/{name}"
        },
        {
            "endpoint": "/api/workflow/schedule/{name}",
            "method": "DELETE",
            "url_pattern": "/schedule/{name}"
        },
        {
            "endpoint": "/api/workflow/queue/data",
            "method": "GET",
            "url_pattern": "/queue/data"
        },
        {
            "endpoint": "/api/workflow/editableworkflows",
            "method": "GET",
            "url_pattern": "/editableworkflows"
        },
        {
            "endpoint": "/api/workflow/workflow/bulk/pause",
            "method": "PUT",
            "url_pattern": "/workflow/bulk/pause"
        },
        {
            "endpoint": "/api/workflow/workflow/bulk/resume",
            "method": "PUT",
            "url_pattern": "/workflow/bulk/resume"
        },
        {
            "endpoint": "/api/workflow/workflow/bulk/retry",
            "method": "POST",
            "url_pattern": "/workflow/bulk/retry"
        },
        {
            "endpoint": "/api/workflow/workflow/bulk/restart",
            "method": "POST",
            "url_pattern": "/workflow/bulk/restart"
        },
        {
            "endpoint": "/api/workflow/workflow/bulk/terminate",
            "method": "POST",
            "url_pattern": "/workflow/bulk/terminate"
        },
        {
            "@comment": "Deprecated",
            "endpoint": "/api/workflow/workflow/bulk/terminate",
            "method": "DELETE",
            "backend_method": "POST",
            "url_pattern": "/workflow/bulk/terminate"
        },
        {
            "endpoint": "/api/workflow/hierarchical",
            "method": "GET",
            "url_pattern": "/hierarchical",
            "input_query_strings": [
                "start",
                "size",
                "status",
                "workflowId",
                "order"
              ]
        },
        {
            "endpoint": "/api/workflow/executions",
            "method": "GET",
            "url_pattern": "/executions?q=&h=",
            "input_query_strings": [
                "start",
                "size",
                "status",
                "workflowId",
                "order"
              ]
        },
        {
            "endpoint": "/api/workflow/external/postgres/{dataId}",
            "method": "GET",
            "url_pattern": "/external/postgres/{dataId}"
        }
    ]
}
