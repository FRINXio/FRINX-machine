{
  "openapi": "3.0.1",
  "info": {
    "title": "FRINX Uniflow OpenAPI",
    "version": "v0"
  },
  "servers": [
    {
      "url": "/api/uniflow",
      "description": "Frinx APi gateway"
    }
  ],
  "paths": {
    "/hierarchical": {
      "get": {
        "tags": [
          "workflow-search"
        ],
        "summary": "Search for workflows based on payload and other parameters",
        "description": "use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC.",
        "operationId": "search",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "*"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultWorkflowSummary"
                }
              }
            }
          }
        }
      }
    },
    "/executions": {
      "get": {
        "tags": [
          "workflow-search"
        ],
        "summary": "Search for workflows and tasks based on payload and other parameters",
        "description": "use sort options as sort=<field>:ASC|DESC e.g. sort=name&sort=workflowId:DESC. If order is not specified, defaults to ASC.",
        "operationId": "executions",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "*"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultWorkflowSummary"
                }
              }
            }
          }
        }
      }
    },
    "/id/{workflowId}": {
      "get": {
        "tags": [
          "workflow-search"
        ],
        "summary": "Search workflow by workflowId",
        "operationId": "id",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultWorkflowIdSummary"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/{workflowId}": {
      "get": {
        "tags": [
          "workflow-resource"
        ],
        "summary": "Gets the workflow by workflow id",
        "operationId": "getExecutionStatus",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeTasks",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "workflow-resource"
        ],
        "summary": "Terminate workflow execution",
        "operationId": "terminate",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/workflow": {
      "post": {
        "tags": [
          "workflow-resource"
        ],
        "summary": "Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain",
        "operationId": "startWorkflow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartWorkflowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/external/postgres/{externalPayloadPath}": {
      "get": {
        "tags": [
          "external-postgres-payload-resource"
        ],
        "summary": "Get task or workflow by externalPayloadPath from External PostgreSQL Storage",
        "operationId": "getExternalStorageData",
        "parameters": [
          {
            "name": "externalPayloadPath",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/bulk/terminate": {
      "delete": {
        "tags": [
          "workflow-bulk-resource"
        ],
        "summary": "Terminate workflows execution",
        "operationId": "terminate_1",
        "parameters": [
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/bulk/pause": {
      "put": {
        "tags": [
          "workflow-bulk-resource"
        ],
        "summary": "Pause the list of workflows",
        "operationId": "pauseWorkflow_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/bulk/resume": {
      "put": {
        "tags": [
          "workflow-bulk-resource"
        ],
        "summary": "Resume the list of workflows",
        "operationId": "resumeWorkflow_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/bulk/restart": {
      "post": {
        "tags": [
          "workflow-bulk-resource"
        ],
        "summary": "Restart the list of completed workflow",
        "operationId": "restart_1",
        "parameters": [
          {
            "name": "useLatestDefinitions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/bulk/retry": {
      "post": {
        "tags": [
          "workflow-bulk-resource"
        ],
        "summary": "Retry the last failed task for each workflow from the list",
        "operationId": "retry_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metadata/workflow/{name}": {
      "get": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Retrieves workflow definition along with blueprint",
        "operationId": "get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowDef"
                }
              }
            }
          }
        }
      }
    },
    "/metadata/workflow": {
      "get": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Retrieves all workflow definition along with blueprint",
        "operationId": "getAll",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowDef"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Create or update workflow definition",
        "operationId": "update_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkflowDef"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Create a new workflow definition",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowDef"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metadata/taskdefs": {
      "get": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Gets all task definition",
        "operationId": "getTaskDefs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskDef"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Update an existing task",
        "operationId": "registerTaskDef_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDef"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Create new task definition(s)",
        "operationId": "registerTaskDef",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskDef"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metadata/taskdefs/{tasktype}": {
      "get": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Gets the task definition",
        "operationId": "getTaskDef",
        "parameters": [
          {
            "name": "tasktype",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDef"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Remove a task definition",
        "operationId": "unregisterTaskDef",
        "parameters": [
          {
            "name": "tasktype",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metadata/workflow/{name}/{version}": {
      "delete": {
        "tags": [
          "metadata-resource"
        ],
        "summary": "Removes workflow definition. It does not remove workflows associated with the definition.",
        "operationId": "unregisterWorkflowDef",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/event/{event}": {
      "get": {
        "tags": [
          "event-resource"
        ],
        "summary": "Get event handlers for a given event",
        "operationId": "getEventHandlersForEvent",
        "parameters": [
          {
            "name": "event",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventHandler"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event": {
      "get": {
        "tags": [
          "event-resource"
        ],
        "summary": "Get all the event handlers",
        "operationId": "getEventHandlers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventHandler"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "event-resource"
        ],
        "summary": "Add a new event handler.",
        "operationId": "addEventHandler",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventHandler"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/event/{name}": {
      "delete": {
        "tags": [
          "event-resource"
        ],
        "summary": "Remove an event handler",
        "operationId": "removeEventHandlerStatus",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/queue/data": {
      "get": {
        "tags": [
          "queue-admin-resource"
        ],
        "summary": "Get all queue data",
        "operationId": "names",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule": {
      "post": {
        "tags": [
          "workflow-schedule"
        ],
        "summary": "Schedule a workflow",
        "operationId": "scheduleWorkflow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/schedule/{name}:{version}": {
      "get": {
        "tags": [
          "workflow-schedule"
        ],
        "summary": "Get a info about scheduled workflow",
        "operationId": "getScheduleWorkflow",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "workflow-schedule"
        ],
        "summary": "Update scheduled workflow",
        "operationId": "updteScheduledWorkflow",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "workflow-schedule"
        ],
        "summary": "Delete scheduled workflow",
        "operationId": "deleteScheduledWorkflow",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/editableworkflows": {
      "get": {
        "tags": [
          "rbac-resource"
        ],
        "summary": "Return bool if user in network-agmin group",
        "operationId": "getEditableworkflows",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Action": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "start_workflow",
              "complete_task",
              "fail_task"
            ]
          },
          "start_workflow": {
            "$ref": "#/components/schemas/StartWorkflow"
          },
          "complete_task": {
            "$ref": "#/components/schemas/TaskDetails"
          },
          "fail_task": {
            "$ref": "#/components/schemas/TaskDetails"
          },
          "expandInlineJSON": {
            "type": "boolean"
          }
        }
      },
      "EventHandler": {
        "required": [
          "actions",
          "event",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "StartWorkflow": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "correlationId": {
            "type": "string"
          },
          "input": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "taskToDomain": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "TaskDetails": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "taskRefName": {
            "type": "string"
          },
          "output": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "taskId": {
            "type": "string"
          }
        }
      },
      "SubWorkflowParams": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "taskToDomain": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "workflowDefinition": {
            "$ref": "#/components/schemas/WorkflowDef"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "taskType": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "CANCELED",
              "FAILED",
              "FAILED_WITH_TERMINAL_ERROR",
              "COMPLETED",
              "COMPLETED_WITH_ERRORS",
              "SCHEDULED",
              "TIMED_OUT",
              "SKIPPED"
            ]
          },
          "inputData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "referenceTaskName": {
            "type": "string"
          },
          "retryCount": {
            "type": "integer",
            "format": "int32"
          },
          "seq": {
            "type": "integer",
            "format": "int32"
          },
          "correlationId": {
            "type": "string"
          },
          "pollCount": {
            "type": "integer",
            "format": "int32"
          },
          "taskDefName": {
            "type": "string"
          },
          "scheduledTime": {
            "type": "integer",
            "format": "int64"
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "updateTime": {
            "type": "integer",
            "format": "int64"
          },
          "startDelayInSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "retriedTaskId": {
            "type": "string"
          },
          "retried": {
            "type": "boolean"
          },
          "executed": {
            "type": "boolean"
          },
          "callbackFromWorker": {
            "type": "boolean"
          },
          "responseTimeoutSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "workflowInstanceId": {
            "type": "string"
          },
          "workflowType": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "reasonForIncompletion": {
            "type": "string"
          },
          "callbackAfterSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "workerId": {
            "type": "string"
          },
          "outputData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "workflowTask": {
            "$ref": "#/components/schemas/WorkflowTask"
          },
          "domain": {
            "type": "string"
          },
          "rateLimitPerFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "rateLimitFrequencyInSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "externalInputPayloadStoragePath": {
            "type": "string"
          },
          "externalOutputPayloadStoragePath": {
            "type": "string"
          },
          "workflowPriority": {
            "type": "integer",
            "format": "int32"
          },
          "executionNameSpace": {
            "type": "string"
          },
          "isolationGroupId": {
            "type": "string"
          },
          "iteration": {
            "type": "integer",
            "format": "int32"
          },
          "subWorkflowId": {
            "type": "string"
          },
          "subworkflowChanged": {
            "type": "boolean"
          },
          "taskDefinition": {
            "$ref": "#/components/schemas/TaskDef"
          },
          "queueWaitTime": {
            "type": "integer",
            "format": "int64"
          },
          "loopOverTask": {
            "type": "boolean"
          }
        }
      },
      "TaskDef": {
        "required": [
          "name",
          "timeoutSeconds"
        ],
        "type": "object",
        "properties": {
          "ownerApp": {
            "type": "string"
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "updateTime": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "retryCount": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timeoutSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "inputKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timeoutPolicy": {
            "type": "string",
            "enum": [
              "RETRY",
              "TIME_OUT_WF",
              "ALERT_ONLY"
            ]
          },
          "retryLogic": {
            "type": "string",
            "enum": [
              "FIXED",
              "EXPONENTIAL_BACKOFF"
            ]
          },
          "retryDelaySeconds": {
            "type": "integer",
            "format": "int32"
          },
          "responseTimeoutSeconds": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "concurrentExecLimit": {
            "type": "integer",
            "format": "int32"
          },
          "inputTemplate": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "rateLimitPerFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "rateLimitFrequencyInSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "isolationGroupId": {
            "type": "string"
          },
          "executionNameSpace": {
            "type": "string"
          },
          "ownerEmail": {
            "type": "string"
          },
          "pollTimeoutSeconds": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WorkflowDef": {
        "required": [
          "name",
          "tasks",
          "timeoutSeconds"
        ],
        "type": "object",
        "properties": {
          "ownerApp": {
            "type": "string"
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "updateTime": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowTask"
            }
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "failureWorkflow": {
            "type": "string"
          },
          "schemaVersion": {
            "maximum": 2,
            "minimum": 2,
            "type": "integer",
            "format": "int32"
          },
          "restartable": {
            "type": "boolean"
          },
          "workflowStatusListenerEnabled": {
            "type": "boolean"
          },
          "ownerEmail": {
            "type": "string"
          },
          "timeoutPolicy": {
            "type": "string",
            "enum": [
              "TIME_OUT_WF",
              "ALERT_ONLY"
            ]
          },
          "timeoutSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "WorkflowTask": {
        "required": [
          "name",
          "taskReferenceName"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "taskReferenceName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "type": {
            "type": "string"
          },
          "dynamicTaskNameParam": {
            "type": "string"
          },
          "caseValueParam": {
            "type": "string"
          },
          "caseExpression": {
            "type": "string"
          },
          "scriptExpression": {
            "type": "string"
          },
          "decisionCases": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowTask"
              }
            }
          },
          "dynamicForkJoinTasksParam": {
            "type": "string",
            "deprecated": true
          },
          "dynamicForkTasksParam": {
            "type": "string"
          },
          "dynamicForkTasksInputParamName": {
            "type": "string"
          },
          "defaultCase": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowTask"
            }
          },
          "forkTasks": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowTask"
              }
            }
          },
          "startDelay": {
            "type": "integer",
            "format": "int32"
          },
          "subWorkflowParam": {
            "$ref": "#/components/schemas/SubWorkflowParams"
          },
          "joinOn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sink": {
            "type": "string"
          },
          "optional": {
            "type": "boolean"
          },
          "taskDefinition": {
            "$ref": "#/components/schemas/TaskDef"
          },
          "rateLimited": {
            "type": "boolean"
          },
          "defaultExclusiveJoinTask": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "asyncComplete": {
            "type": "boolean"
          },
          "loopCondition": {
            "type": "string"
          },
          "loopOver": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowTask"
            }
          },
          "retryCount": {
            "type": "integer",
            "format": "int32"
          },
          "workflowTaskType": {
            "type": "string",
            "writeOnly": true,
            "enum": [
              "SIMPLE",
              "DYNAMIC",
              "FORK_JOIN",
              "FORK_JOIN_DYNAMIC",
              "DECISION",
              "JOIN",
              "DO_WHILE",
              "SUB_WORKFLOW",
              "EVENT",
              "WAIT",
              "USER_DEFINED",
              "HTTP",
              "LAMBDA",
              "EXCLUSIVE_JOIN",
              "TERMINATE",
              "KAFKA_PUBLISH",
              "JSON_JQ_TRANSFORM",
              "SET_VARIABLE"
            ]
          }
        }
      },
      "SearchResultWorkflowSummary": {
        "type": "object",
        "properties": {
          "totalHits": {
            "type": "integer",
            "format": "int64"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowSummary"
            }
          }
        }
      },
      "SearchResultWorkflowIdSummary": {
        "type": "object",
        "properties": {
          "results": {
            "type": "object",
            "$ref": "#/components/schemas/Workflow"
          }
        }
      },
      "WorkflowSummary": {
        "type": "object",
        "properties": {
          "workflowType": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "workflowId": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "updateTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "TIMED_OUT",
              "TERMINATED",
              "PAUSED"
            ]
          },
          "input": {
            "type": "string"
          },
          "output": {
            "type": "string"
          },
          "reasonForIncompletion": {
            "type": "string"
          },
          "executionTime": {
            "type": "integer",
            "format": "int64"
          },
          "event": {
            "type": "string"
          },
          "failedReferenceTaskNames": {
            "type": "string"
          },
          "externalInputPayloadStoragePath": {
            "type": "string"
          },
          "externalOutputPayloadStoragePath": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "inputSize": {
            "type": "integer",
            "format": "int64"
          },
          "outputSize": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StartWorkflowRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "correlationId": {
            "type": "string"
          },
          "input": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "taskToDomain": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "workflowDef": {
            "$ref": "#/components/schemas/WorkflowDef"
          },
          "externalInputPayloadStoragePath": {
            "type": "string"
          },
          "priority": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "ownerApp": {
            "type": "string"
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "updateTime": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "TIMED_OUT",
              "TERMINATED",
              "PAUSED"
            ]
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "workflowId": {
            "type": "string"
          },
          "parentWorkflowId": {
            "type": "string"
          },
          "parentWorkflowTaskId": {
            "type": "string"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "input": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "output": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "correlationId": {
            "type": "string"
          },
          "reRunFromWorkflowId": {
            "type": "string"
          },
          "reasonForIncompletion": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "taskToDomain": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "failedReferenceTaskNames": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "workflowDefinition": {
            "$ref": "#/components/schemas/WorkflowDef"
          },
          "externalInputPayloadStoragePath": {
            "type": "string"
          },
          "externalOutputPayloadStoragePath": {
            "type": "string"
          },
          "priority": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "lastRetriedTime": {
            "type": "integer",
            "format": "int64"
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "workflowName": {
            "type": "string"
          },
          "workflowVersion": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BulkResponse": {
        "type": "object",
        "properties": {
          "bulkErrorResults": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "bulkSuccessfulResults": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScheduleData": {
        "type": "object",
        "properties": {
          "cronString": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "workflowContext": {
            "type": "object"
          },
          "workflowVersion": {
            "type": "string"
          },
          "workflowName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      }
    }
  }
}