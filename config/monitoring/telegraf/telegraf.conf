[global_tags]

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 20000
  metric_buffer_limit = 100000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false
[[inputs.net]]

[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs"]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]
[[inputs.system]]
[[inputs.netstat]]

[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  timeout = "5s"
  perdevice = false
  total = true
  docker_label_include = []
  docker_label_exclude = []
  source_tag = true

# [[inputs.docker_log]]
#   endpoint = "unix:///var/run/docker.sock"
#   timeout = "5s"
#   source_tag = false

[[inputs.x509_cert]]
  sources = ["/usr/local/share/ca-certificates/frinx_uniconfig_tls_cert.pem", "/usr/local/share/ca-certificates/frinx_krakend_tls_cert.pem"]
  insecure_skip_verify = true
  timeout = "12h"

[[inputs.tail]]
  files = ["/tmp/uniconfig/*/*/metrics.log", "/tmp/conductor/metrics.log"]
  data_format = "influx"


[[outputs.influxdb_v2]]

  urls = ["http://influxdb:8086"]

  ## Token for authentication.
  token = "${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "${DOCKER_INFLUXDB_INIT_ORG}"

  ## Destination bucket to write into.
  bucket = "${DOCKER_INFLUXDB_INIT_BUCKET}"

  ## Timeout for HTTP messages.
  timeout = "10s"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  content_encoding = "gzip"

[[outputs.health]]
  service_address = "http://:8080"

[[processors.regex]]
  namepass = ["conductor"]

  [[processors.regex.fields]]
    key = "name"
    pattern = "workflow_execution.class-WorkflowMonitor.+workflowName-(?P<tenant>.*)___(?P<workflow>.*)"
    replacement = "${tenant}"
    result_key = "tenant"

  [[processors.regex.fields]]
    key = "name"
    pattern = "workflow_execution.class-WorkflowMonitor.+workflowName-(?P<tenant>.*)___(?P<workflow>.*)"
    replacement = "${workflow}"
    result_key = "workflow"
