{
    // Controller configuration.
    "controller": {
        // DOM notification service - settings related to notifications queue.
        "domNotificationRouterConfig": {
            // size of the notification queue
            "queueDepth": 65536,
            // the maximum time in to busy spin for (see PhasedBackoffWaitStrategy)
            "spinTime": 0,
            // the maximum time in to yield for (see PhasedBackoffWaitStrategy)
            "parkTime": 0,
            // time unit that expresses values of spin-time and park-time.
            "unit": "MILLISECONDS"
        },
        /*
        Contains list of paths to artifacts containing YANG modules for UniConfig schema
        and identifiers of the schema directories.
        */
        "schemaServiceConfig": {
            // set of YANG modules that are loaded at initialization of UniConfig
            "topLevelModules": [],
            // path to the root cache directory that holds custom schemas
            "rootCacheDirectory": "cache",
            // path to the directory to which system YANG schemas are loaded
            "systemSchemasDirectory": "schemas"
        },
        // Settings related to configuration datastore and associated data-change events
        "configurationDatastoreConfig": {
            // maximum thread pool size for the data change notification executor
            "maxDataChangeExecutorPoolSize": 20,
            // maximum queue size for the data change notification executor
            "maxDataChangeExecutorQueueSize": 1000,
            // maximum queue size for the data change listeners
            "maxDataChangeListenerQueueSize": 1000,
            // maximum queue size for the data store executor
            "maxDataStoreExecutorQueueSize": 5000
        },
        // Settings related to operational datastore and associated data-change events
        "operationalDatastoreConfig": {
            // maximum thread pool size for the data change notification executor
            "maxDataChangeExecutorPoolSize": 20,
            // maximum queue size for the data change notification executor
            "maxDataChangeExecutorQueueSize": 1000,
            // maximum queue size for the data change listeners
            "maxDataChangeListenerQueueSize": 1000,
            // maximum queue size for the data store executor
            "maxDataStoreExecutorQueueSize": 5000
        }
    },
    // RESTCONF and web server settings
    "restconf": {
        // listening web server port
        "httpPort": 8181,
        // IP address on which web server is listening to incoming requests (0.0.0.0 - addresses of all interfaces)
        "inetAddress": "0.0.0.0",
        // common URL prefix under which all resources and operations are registered
        "restconfServletContextPath": "/rests",
        // Settings related to filtering of data in CRUD operations.
        "schemaFilters": {
            // List of extension definitions that can be used to filter out data during PUT/POST/PATCH operation.
            //"ignoredDataOnWriteByExtensions": [
            //    "tailf:hidden full"
            //],
            // List of extension definitions that can be used to filter out data during GET operation.
            //"hiddenDataOnReadByExtensions": [
            //    "tailf:hidden deprecated",
            //    "tailf:hidden debug"
            //],
            // Indicates if the data for non-existing schema nodes will be ignored during PUT/POST/PATCH operation.
            "ignoreUnsupportedDefinitionsOnWrite": false,
            // Indicates if the definition with "DEPRECATED" status should be hidden during GET operation.
            "hideDeprecatedDefinitionsOnRead": false
        }
    },
    /*
    CLI shell settings via environment variables.
    Environment variables override settings from JSON config part.

    cliShell_sshServer_enabled=false
    cliShell_sshServer_port=2022
    cliShell_sshServer_inetAddress=0.0.0.0
    cliShell_sshServer_usernamePasswordAuth_username=admin
    cliShell_sshServer_usernamePasswordAuth_password=secret
    */
    "cliShell": {
        "sshServer": {
            // Flag that determines if ssh server will be started or not.
            "enabled": false,
            // Port bind to ssh server.
            "port": 2022,
            // IP address bind to ssh server.
            "inetAddress": "127.0.0.1",
            // Basic username + password authentication.
            "usernamePasswordAuth": {
                "username": "admin",
                "password": "secret"
            }
        }
    },
    /*
    Settings for the Device Discovery service
    */
    "deviceDiscovery":{
        // A parameter that specifies the local address from which the scanning will be ran.
        "localAddress": "",
        // A parameter that specifies the maximum pool size by the executor.
        // If left empty, the default will be CPU_COUNT * 8.
        //"maxPoolSize": 20,
        // A parameter that specifies the maximum limit of IP addresses that the service can process in one request.
        "addressCheckLimit": 254
    },
    /*
    DB persistence settings via environment variables.
    Environment variables override settings from JSON config part.

    dbPersistence_embedded_database_enabled=false
    dbPersistence_embedded_database_dataDir=./data/pg_dir
    dbPersistence_embedded_database_cleanDataDir=true
    dbPersistence_connection_dbName=uniconfig
    dbPersistence_connection_username=uniremote
    dbPersistence_connection_password=unipass
    dbPersistence_connection_initialDbPoolSize=5
    dbPersistence_connection_maxDbPoolSize=10
    dbPersistence_connection_maxIdleConnections=5
    dbPersistence_connection_maxWaitTime=30000
    dbPersistence_connection_enabledTls=false
    dbPersistence_connection_tlsClientCert=./client.pks
    dbPersistence_connection_tlsClientKey=./client.key
    dbPersistence_connection_tlsCaCert=./ca.pks
    dbPersistence_connection_databaseLocations_host=127.0.0.1
    dbPersistence_connection_databaseLocations_port=26257
    dbPersistence_uniconfigInstance_instanceName=uc-0
    */
    "dbPersistence": {
        /*
        Grouped settings that are related to embedded database.
        The embedded database is only for testing purposes, it should not be run in the production environment.
        Database is started and initialized using 'connection'/'dbName' and 'connection'/'username' parameters.
        The embedded database does not use a password, therefore it ignores the password parameter.
        */
        "embeddedDatabase": {
            // Flag that determines if embedded database will be started or not.
            "enabled": false,
            // A parameter that specifies the name of the subdirectory in which the embedded database is stored.
            "dataDir": "./data/pg_dir",
            // A parameter that determines if the 'dataDir' directory will be deleted after uniconfig is turned off.
            "cleanDataDir": true
        },
        // Grouped settings related to database connection.
        "connection": {
            // name of the database
            "dbName": "unistore",
            // name of the user that has the remote access to database specified by 'dbName'
            "username": "uniremote",
            // user password (it is used only for the password-base authentication)
            "password": "unipass",
            // initial size of the connection pool (pre-initialized connections)
            "initialDbPoolSize": 5,
            // maximum size of the connection pool, before creation of next connections are blocked
            "maxDbPoolSize": 300,
            // maximum number of idle connections before next idle connections are cleaned
            "maxIdleConnections": 5,
            /*
            Timeout value used for socket read operations. If reading from the server takes longer than this value,
            the connection is closed. This can be used as both a brute force global query timeout and a method of
            detecting network problems. The timeout is specified in seconds and a value of 0 means that it is disabled.
            */
            "socketReadTimeout": 20,
            // maximum wait time for obtaining of a new connection before fetch request is dropped [milliseconds]
            "maxWaitTime": 30000,
            // enabled TLS authentication (if it is enabled, 'tlsClientCert', 'tlsClientKey', and 'tlsCaCert'
            // are used and 'password' field is not used
            "enabledTls": false,
            // path to UniConfig client certificate (relative path from UniConfig main folder)
            // - used for authentication of UniConfig against DB
            "tlsClientCert": "./client.pks",
            // path to UniConfig client certificate key (relative path from UniConfig main folder)
            "tlsClientKey": "./client.key",
            // path to certificate of DB certificate authority - used for authentication of DB against UniConfig
            "tlsCaCert": "./ca.pks",
            /*
            List of network locations at which target database resides. The first entry is always tried in the first
            attempt during creation of database connection. If there are multiple entries specified, then other
            locations are used as fallback method in the order in which they are specified.
            */
            "databaseLocations": [
                {
                    // database hostname / IP address
                    "host": "127.0.0.1",
                    // TCP port on which target database listens to incoming connections
                    "port": 26257
                }
            ]
        },
        // UniConfig instance naming settings.
        "uniconfigInstance": {
            // Identifier of the local UniConfig instance (name must be unique in the cluster). If it is set to 'null'
            // then this identifier is tried to be loaded from 'data/instance_name'. If this file doesn't exist, then
            // name of the UniConfig instance is randomly generated and this file is created with new name of instance.
            "instanceName": null
        },
        // Heart beat service settings.
        "heartBeat": {
            // interval between updating of local UniConfig instance heartbeat timestamp [milliseconds]
            "heartbeatInterval": 1000
        }
    },
    // Template settings
    "templates": {
        // Enabled templates - if it is set to 'false', UniConfig will not prepare YANG modules for templates
        // - creation of templates will not work. Enabled templates consumes more memory than setup without templates.
        "enabled": false
        /* Name of the YANG module which is used for comparison of loaded YANG repositories based on revision and
           further saving the name of the latest YANG repository. Latest YANG repository is automatically used
           at creation of new template node, if user doesn't specify it explicitly. If this setting is not specified,
           this feature will be disabled.*/
        // "latestSchemaReferenceModuleName": "system"
    },
    // Grouped settings that are related to Uniconfig transactions.
    "transactions": {
        /*
        Time after transaction can be closed [seconds] by transaction cleaner.
        */
        "transactionIdleTimeOut": 3600,
        /*
        Maximum transaction age before it can be evicted from transaction registry [seconds].
        Configuring '0' disables cleaning of Uniconfig transactions.
        */
        "maxTransactionAge": 7200,
        /*
        Interval at which expired transactions are closed and cleaned [seconds].
        Expired transaction: transaction which age exceeds 'maxTransactionAge' setting.
        Only dedicated Uniconfig transactions (initialized using 'create-transaction' RPC)
        are cleaned - shared transaction is never removed or invalidated.
         Configuring '0' disables cleaning of Uniconfig transactions.
        */
        "cleaningInterval": 60
    },
    // Grouped settings that are related to notifications.
    "notifications": {
        // Flag that determines whether notifications are collected
        "enabled": false,
        "kafka": {
            // Username used for authentication into Kafka brokers (SASL). If it is not set, then authentication
            // is disabled (PLAINTEXT scheme).
            // "username": "kafka",
            // Password used for authentication into Kafka brokers.
            //"password": "kafka",
            "kafkaServers": [
                {
                    // Address / hostname of the interface on which Kafka broker is listening to incoming connections.
                    "brokerHost": "127.0.0.1",
                    // TCP port on which Kafka broker is listening to incoming connections.
                    "brokerListeningPort": 9092
                }
            ],
            // Flag that determines whether netconf notifications are enabled
            "netconfNotificationsEnabled": true,
            // Flag that determines whether audit logs are enabled
            "auditLogsEnabled": true,
            // Flag that determines whether transaction notifications are enabled
            "transactionNotificationsEnabled": true,
            // Unique identifier of topic that is used for storing netconf notifications.
            "netconfNotificationsTopicName": "netconf-notifications",
            // Unique identifier of topic that is used for storing audit logs.
            "auditLogsTopicName": "audit-logs",
            // Unique identifier of topic that is used for storing transaction notifications.
            "transactionsTopicName": "transactions",
            // Embedded Kafka settings (embedded Kafka is disabled by default, it should not be used in the production).
            // Only PLAINTEXT authentication scheme is supported.
            "embeddedKafka": {
                // If this flag is set to 'true', then embedded Kafka is started during boot process.
                // Otherwise, all other settings are effectively ignored.
                "enabled": false,
                // Directory to which embedded Kafka is downloaded and extracted.
                "installDir": "/tmp/embedded-kafka",
                // URL that is used for download of Kafka, if it hasn't been downloaded yet.
                "archiveUrl": "https://dlcdn.apache.org/kafka/3.0.0/kafka_2.12-3.0.0.tgz",
                // Directory containing Kafka data files - persisted topics.
                "dataDir": "./data/embedded-kafka",
                // Clean data from previous run before starting of Kafka (= disabled persistence).
                "cleanDataBeforeStart": true,
                // Number of partitions used for created topic.
                "partitions": 1
            }
        },
        // Settings related to audit logs
        "auditLogs": {
            // If response body should be included in notification
            "includeResponseBody": false
        },
        // Config for deletion of old notifications from db
        "notificationDbTreshold": {
            // Maximum count of records, after reaching this count oldest records will be deleted
            "maxCount": 10000,
            // Maximum age of records, all older records will be deleted (in hours)
            "maxAge": 100
        },
        // How often should uniconfig check for unassigned netconf notifications subscriptions (in seconds)
        "netconfSubscriptionsMonitoringInterval": 5,
        // How many unassigned netconf subscriptions can be processed within one subscription monitoring interval
        "maxNetconfSubscriptionsPerInterval": 10
    },
    // Initial logging configuration (afterwards it can be updated using RPCs).
    "loggingController": {
        // Configuration of specific logging brokers for different system components.
        "broker": [
            // Logging all NETCONF messages.
            {
                // Logging broker identifier.
                "broker-identifier": "netconf_messages",
                // Enabled/disabled logging.
                "is-logging-broker-enabled": false,
                // Configured default logging behaviour - if it is set to 'true', logging is enabled
                // for all NETCONF devices. Otherwise, it is enabled only for explicitly defined devices
                // ('device-list' field).
                "is-logging-enabled-on-all-devices": false
                // List of devices for which logging is enabled.
                //"device-list": ["dev1", "dev2"]
            },
            // Logging all southbound NETCONF events related to creation/closing of NETCONF connections.
            {
                "broker-identifier": "netconf_events",
                "is-logging-broker-enabled": false,
                "is-logging-enabled-on-all-devices": false
            },
            // Logging all NETCONF notification messages.
            {
                "broker-identifier": "netconf_notifications",
                "is-logging-broker-enabled": false,
                "is-logging-enabled-on-all-devices": false
            },
            // Logging all CLI commands and responses.
            {
                "broker-identifier": "cli_messages",
                "is-logging-broker-enabled": false,
                "is-logging-enabled-on-all-devices": false
            },
            // Logging RESTCONF requests and responses.
            {
                "broker-identifier": "restconf",
                "is-logging-broker-enabled": false
                // HTTP headers which content is removed from logs.
                //"restconf-logging:hidden-http-headers": [
                //    "Authorization",
                //    "Cookie"
                //],
                // HTTP operations that are not logged.
                //"restconf-logging:hidden-http-methods": [
                //    "GET"
                //]
            }
        ]
    },
    // cryptographic settings
    "crypto": {
        // identifier of YANG extension that is responsible for marking of leaves/leaf-lists that must be encrypted
        // "encryptExtensionId": "frinx-encrypt:encrypt",
        // name of YANG module from which the correct revision of 'netconfEncryptedPathsModuleName' is chosen
        // "netconfReferenceModuleName": "system",
        // name of YANG module which contains deviations to leaves/leaf-lists that must be encrypted
        // "netconfEncryptedPathsModuleName": "encrypted-paths"
    }
}