# UniFlow containers
version: "3.7"

x-logging: &logging_loki
    driver: loki
    options:
      loki-url: "http://${MANAGER_IP_ADDR}:3100/loki/api/v1/push"
      max-file: "3"
      max-size: "10m"
      mode: non-blocking
      loki-retries: "1"
      loki-batch-size: "1500"
      loki-relabel-config: |
        - action: labelmap
          regex: swarm_(service)

services:
  krakend:
    image: frinx/krakend:1.0.2
    # user: root
    logging: *logging_loki
    labels:
      - traefik.enable=false
    environment:
      - FC_ENABLE=1
      - FC_SETTINGS=/etc/krakend/settings
      - FC_PARTIALS=/etc/krakend/partials
      - FC_TEMPLATES=/etc/krakend/templates
      # HTTPS SETTINGS
      - TLS_DISABLED=${TLS_DISABLED}
      # AUTHORIZATION AND AUTHENTICATION SETTINGS
      # IF false, THEN Fake-Frinx-Token Used
      # IF true,  THEN Azure AD Token Required 
      - AUTH_ENABLED=${AUTH_ENABLED}
      # - FC_OUT=/etc/krakend/output.json
      # Ignore x509 certificate errors
      - GODEBUG="x509ignoreCN=0"
      - PROXY_ENABLED=${PROXY_ENABLED:-false}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=workflow-proxy,frinx-frontend,inventory,uniconfig,unistore,uniresource
    volumes:
      - ${UF_CONFIG_PATH}/krakend:/etc/krakend:ro
    secrets:
      - frinx_auth
      - frinx_rbac
      - source: frinx_krakend_tls_cert.pem
        target: /home/krakend/frinx_krakend_tls_cert.pem
      - source: frinx_krakend_tls_key.pem
        target: /home/krakend/frinx_krakend_tls_key.pem
      - source: frinx_uniconfig_tls_cert.pem
        target: /usr/local/share/ca-certificates/frinx_uniconfig_tls_cert.crt
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    healthcheck:
      test: curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://127.0.0.1:8080/__health' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - target: 8080
        published: ${KRAKEND_PORT}
        mode: host  
    ulimits:
      nofile:
        soft: ${KD_ULIMIT_NOFILE_SOFT}
        hard: ${KD_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${KD_ULIMIT_NPROC_SOFT}
        hard: ${KD_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${KD_RES_LIMIT_CPUS}
          memory: ${KD_RES_LIMIT_MEM}

  conductor-server:
    image: frinx/uniflow-conductor-server:1.0.5
    # user: guest
    logging: *logging_loki
    labels:
      - traefik.enable=false  
    environment:
      - CONFIG_PROP=config.properties
      - _JAVA_OPTIONS="-Xmx${CS_RES_LIMIT_MEM}"
    volumes:
      - ${UF_CONFIG_PATH}/conductor/config.properties:/app/config/config.properties:ro
    secrets:
      - frinx_uniflow
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    healthcheck:
      test: curl -I -XGET http://localhost:8080/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    ulimits:
      nofile:
        soft: ${CS_ULIMIT_NOFILE_SOFT}
        hard: ${CS_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${CS_ULIMIT_NPROC_SOFT}
        hard: ${CS_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    sysctls:
      net.ipv4.tcp_keepalive_time: 300
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${CS_RES_LIMIT_CPUS}
          memory: ${CS_RES_LIMIT_MEM}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.1
    user: elasticsearch
    logging: *logging_loki
    labels:
      - traefik.enable=false 
    environment:
      - "discovery.type=single-node"
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms${ES_JAVA_OPTS_M} -Xmx${ES_JAVA_OPTS_M}"
    volumes:
      - frinx_uniflow_elastic_data:/usr/share/elasticsearch/data
      - frinx_uniflow_elastic_logs:/usr/share/elasticsearch/logs
      - ${UF_CONFIG_PATH}/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ${UF_CONFIG_PATH}/elasticsearch/backup.sh:/usr/share/elasticsearch/backup.sh:ro
    healthcheck:
      test: curl -X GET 'localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${ES_ULIMIT_NOFILE_SOFT}
        hard: ${ES_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${ES_ULIMIT_NPROC_SOFT}
        hard: ${ES_ULIMIT_NPROC_HARD}
      memlock:
        soft: -1
        hard: -1
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${ES_RES_LIMIT_CPUS}
          memory: ${ES_RES_LIMIT_MEM}

  frinx-frontend:
    image: frinx/frinx-frontend:latest
    user: node
    logging: *logging_loki
    labels:
      - traefik.enable=false
    entrypoint: ["/set_env_secrets.sh", "yarn start"]
    secrets:
      - frinx_auth
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    environment:
      - AUTH_REDIRECT_SCHEME=${KRAKEND_TLS_PROTOCOL}
      - AUTH_ENABLED=${AUTH_ENABLED}
      - URL_BASENAME=/frinxui
      - UNIFLOW_ENABLED=true
      - CONDUCTOR_API_URL=/api/uniflow
      - UNIFLOW_API_DOCS_URL=/api/uniflow/docs
      - UNICONFIG_ENABLED=true
      - UNICONFIG_API_DOCS_URL=/api/uniflow/docs-uniconfig
      - INVENTORY_ENABLED=true
      - INVENTORY_API_URL=/api/inventory
      - UNIRESOURCE_ENABLED=true
      - UNIRESOURCE_API_URL=/api/uniresource
      - UNISTORE_API_URL=/api/unistore
      - GAMMA_ENABLED=${GM_UI_ENABLED:-false}
    healthcheck:
      test: wget --spider -q '0.0.0.0:8888'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ulimits:
      nofile:
        soft: ${FF_ULIMIT_NOFILE_SOFT}
        hard: ${FF_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${FF_ULIMIT_NPROC_SOFT}
        hard: ${FF_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${FF_RES_LIMIT_CPUS}
          memory: ${FF_RES_LIMIT_MEM}

  postgresql:
    image: postgres:12.2
    user: postgres
    logging: *logging_loki
    labels:
      - traefik.enable=false  
    entrypoint: ["/set_env_secrets.sh","docker-entrypoint.sh postgres"]
    volumes:
      - frinx_uniflow_postgresql_data:/var/lib/postgresql/data
      - ${UF_CONFIG_PATH}/uniflow-postgres:/docker-entrypoint-initdb.d:ro
    secrets:
      - frinx_uniflow
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ulimits:
      nofile:
        soft: ${PG_ULIMIT_NOFILE_SOFT}
        hard: ${PG_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${PG_ULIMIT_NPROC_SOFT}
        hard: ${PG_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${PG_RES_LIMIT_CPUS}
          memory: ${PG_RES_LIMIT_MEM}

  schellar:
    image: frinx/uniflow-schellar:1.9.3
    logging: *logging_loki
    labels:
      - traefik.enable=false  
    environment:
      - LOG_LEVEL=debug
      - CHECK_INTERVAL_SECONDS=10
      - CONDUCTOR_API_URL=http://conductor-server:8080/api
      - BACKEND=postgres
      - POSTGRES_MIGRATIONS_DIR=migrations
    entrypoint: ["/set_env_secrets.sh", "./schellar"]
    secrets:
      - frinx_uniflow
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    healthcheck:
      test: wget --spider -q conductor-server:8080/health && wget --spider -q 127.0.0.1:3000/liveness && nc -z postgresql:5432
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${SC_ULIMIT_NOFILE_SOFT}
        hard: ${SC_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${SC_ULIMIT_NPROC_SOFT}
        hard: ${SC_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${SC_RES_LIMIT_CPUS}
          memory: ${SC_RES_LIMIT_MEM}

  workflow-proxy:
    image: frinx/workflow-proxy:1.0.7
    user: node
    logging: *logging_loki
    labels:
      - traefik.enable=false
    entrypoint: ["/set_env_secrets.sh", "yarn start"]
    secrets:
      - frinx_rbac
      - frinx_auth
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    environment:
      - OAUTH2=${AUTH_ENABLED}
    healthcheck:
      test: curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://127.0.0.1:8088/probe/readiness' && curl -I -XGET http://conductor-server:8080/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${WP_ULIMIT_NOFILE_SOFT}
        hard: ${WP_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${WP_ULIMIT_NPROC_SOFT}
        hard: ${WP_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${WP_RES_LIMIT_CPUS}
          memory: ${WP_RES_LIMIT_MEM}

  uniresource:
    image: frinx/resource-manager:latest
    logging: *logging_loki
    labels:
      - traefik.enable=false
    entrypoint: ["/set_env_secrets.sh", "./run.sh"]
    secrets:
      - frinx_uniflow
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    environment:
      - RM_LOG_PATH=/var/log/rm.log
      - RM_LOG_LEVEL=warn
      - WASMER_MAX_TIMEOUT_MILLIS=10000
    healthcheck:
      test: curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://0.0.0.0:8884/healthz/readiness'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${UR_ULIMIT_NOFILE_SOFT}
        hard: ${UR_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${UR_ULIMIT_NPROC_SOFT}
        hard: ${UR_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${UR_RES_LIMIT_CPUS}
          memory: ${UR_RES_LIMIT_MEM}

  inventory:
    image: frinx/frinx-inventory-server:1.2.1
    logging: *logging_loki
    labels:
      - traefik.enable=false
    entrypoint: ["/run_inventory.sh"]
    secrets:
      - frinx_auth
      - frinx_inventory
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    environment:
      - UNICONFIG_API_PROTOCOL=https
      - UNICONFIG_API_PORT=8181
      - UNICONFIG_LIST_URL=${KRAKEND_TLS_PROTOCOL}://krakend:8080/static/list/uniconfig
    volumes:
      - ${UF_CONFIG_PATH}/inventory/run_inventory.sh:/run_inventory.sh:ro
    healthcheck:
      test: wget --spider -q '0.0.0.0:8000/.well-known/apollo/server-health'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    entrypoint: ["/run_inventory.sh"]
    ulimits:
      nofile:
        soft: ${IV_ULIMIT_NOFILE_SOFT}
        hard: ${IV_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${IV_ULIMIT_NPROC_SOFT}
        hard: ${IV_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${IV_RES_LIMIT_CPUS}
          memory: ${IV_RES_LIMIT_MEM}

  inventory-postgres:
    image: postgres:12.2
    user: postgres
    logging: *logging_loki
    labels:
      - traefik.enable=false
    entrypoint: ["/set_env_secrets.sh", "docker-entrypoint.sh postgres"]
    volumes:
      - frinx_uniflow_inventory_postgresql_data:/var/lib/postgresql/data
    secrets:
      - frinx_inventory
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ulimits:
      nofile:
        soft: ${IP_ULIMIT_NOFILE_SOFT}
        hard: ${IP_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${IP_ULIMIT_NPROC_SOFT}
        hard: ${IP_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${IP_RES_LIMIT_CPUS}
          memory: ${IP_RES_LIMIT_MEM}

secrets:
  frinx_auth:
    external: true
  frinx_inventory:
    external: true
  frinx_uniflow:
    external: true
  frinx_krakend_tls_cert.pem:
    external: true
  frinx_krakend_tls_key.pem:
    external: true
  frinx_uniconfig_tls_cert.pem:
    external: true
  frinx_rbac:
    external: true

configs:
  set_env_secrets:
    file: ${UF_CONFIG_PATH}/set_env_secrets.sh

volumes:
  frinx_uniflow_elastic_data:
    name: frinx_uniflow_elastic_data
  frinx_uniflow_elastic_logs:
    name: frinx_uniflow_elastic_logs
  frinx_uniflow_postgresql_data:
    name: frinx_uniflow_postgresql_data
  frinx_uniflow_inventory_postgresql_data:
    name: frinx_uniflow_inventory_postgresql_data

networks:
  default:
    name: frinx-machine
