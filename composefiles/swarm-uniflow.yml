# UniFlow containers
version: "3.7"

services:
  krakend:
    # user: root
    environment:
      - FC_ENABLE=1
      - FC_SETTINGS=/etc/krakend/settings
      - FC_PARTIALS=/etc/krakend/partials
      - FC_TEMPLATES=/etc/krakend/templates
      # - FC_OUT=/etc/krakend/output.json
    image: frinx/krakend:1.2.0
    volumes:
      - ${UF_CONFIG_PATH}/krakend:/etc/krakend
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    ports:
      - target: 8080
        published: ${API_GATEWAY_PORT}
        mode: host # This makes host to listen on 0.0.0.0:${API_GATEWAY_PORT} 
                   # It is the same as you would expect when publishing a port when not running in swarm mode. 
                   # It is NOT host networking in plain docker.
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    # healthcheck:
    #   test: curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://127.0.0.1:8080/__health' || exit 1
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 20s

  conductor-server:
    environment:
      - CONFIG_PROP=config.properties
    image: frinx/uniflow-conductor-server:1.0.0
    volumes:
      -  ${UF_CONFIG_PATH}/conductor/config.properties:/app/config/config.properties
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    healthcheck:
      test: wget -O- localhost:8080/api/health
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 60s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.1
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
    volumes:
      - uniflow_elastic_data:/usr/share/elasticsearch/data
      -  ${UF_CONFIG_PATH}/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      -  ${UF_CONFIG_PATH}/elasticsearch/backup.sh:/usr/share/elasticsearch/backup.sh
    healthcheck:
      test: curl -X GET 'localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1

  dashboard:
    # TODO: make stable release and change 'latest' version to a stable one
    image: frinx/frinx-frontend:latest
    volumes:
      - ${UF_CONFIG_PATH}/frinx-frontend/config.json:/usr/share/nginx/html/config.json
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    healthcheck:
      test: curl --silent -o /dev/null  --write-out 'HTTPSTATUS:%{http_code}\n' -X GET 'http://127.0.0.1:8888' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgresql:
    image: postgres:12.2
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_MULTIPLE_DATABASES=conductor,frinx,schellar
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - uniflow_postgresql_data:/var/lib/postgresql/data
      -  ${UF_CONFIG_PATH}/uniflow-postgres:/docker-entrypoint-initdb.d
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1

  schellar:
    image: frinx/uniflow-schellar:1.9.2
    environment:
      - LOG_LEVEL=debug
      - CHECK_INTERVAL_SECONDS=10
      - CONDUCTOR_API_URL=http://conductor-server:8080/api
      - BACKEND=postgres
      - POSTGRES_MIGRATIONS_DIR=migrations
      - POSTGRES_DATABASE_URL=host=postgresql port=5432 user=postgres password=postgres database=schellar
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    healthcheck:
      test: wget -O /dev/null -q conductor-server:8080 && nc -z postgresql:5432
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  workflow-proxy:
    image: frinx/workflow-proxy:1.0.0
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    healthcheck:
      test: curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://127.0.0.1:8088/probe/liveness'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1

volumes:
  uniflow_elastic_data:
    name: uniflow_elastic_data
  uniflow_postgresql_data:
    name: uniflow_postgresql_data

networks:
  default:
    name: frinx-machine
