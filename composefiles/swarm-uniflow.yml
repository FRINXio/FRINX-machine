# UniFlow containers
version: "3.7"

services:
  api-gateway:
    image: frinx/api-gateway:1.0.0
    environment:
      - API_GATEWAY_HOST=api-gateway:5000
      - DASHBOARD_HOST=dashboard:5001
      - UNIFLOW_UI_HOST=uniflow-ui:3000
      - UNIFLOW_API_HOST=uniflow-api:3001
      - UNICONFIG_UI_HOST=uniconfig-ui:4000
      - UNICONFIG_API_HOST=${CONSTRAINT_HOSTNAME}_uniconfig:8181
      # TODO: Make uniconfig-ui able to route to multiple UNICONFIG_API_HOSTs, see uniconfig-ui service
      # Currently working on local deployment only
      - API_GATEWAY_HTTPS=true
      - UNICONFIG_UI_PROTOCOL=https
      - UNICONFIG_API_PROTOCOL=https
    volumes:
      - ../config/api-gateway:/api-gateway/certificates
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    ports:
      - 443:5000
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    healthcheck:
      test: curl --insecure --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'https://127.0.0.1:5000/uniflow/ui'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  conductor-server:
    environment:
      - CONFIG_PROP=config.properties
    image: frinx/uniflow-conductor-server:1.0.0
    volumes:
      - ../config/conductor/config.properties:/app/config/config.properties
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    healthcheck:
      test: wget -O- localhost:8080/api/health
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 60s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.1
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
    volumes:
      - uniflow_elastic_data:/usr/share/elasticsearch/data
      - ../config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ../config/elasticsearch/backup.sh:/usr/share/elasticsearch/backup.sh
    healthcheck:
      test: curl -X GET 'localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1

  dashboard:
    image: frinx/frinx-dashboard:1.0.0
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"

  micros:
    image: frinx/uniflow-micros:1.0.3
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      - UNICONFIG_URL_BASE=https://${CONSTRAINT_HOSTNAME}_uniconfig:8181/rests
    deploy:
      restart_policy:
        delay: 10s
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1

  postgresql:
    image: postgres:12.2
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_MULTIPLE_DATABASES=conductor,frinx,schellar
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - uniflow_postgresql_data:/var/lib/postgresql/data
      - ../config/uniflow-postgres:/docker-entrypoint-initdb.d
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1

  schellar:
    image: frinx/uniflow-schellar:1.9.1
    environment:
      - LOG_LEVEL=debug
      - CHECK_INTERVAL_SECONDS=10
      - CONDUCTOR_API_URL=http://conductor-server:8080/api
      - BACKEND=postgres
      - POSTGRES_MIGRATIONS_DIR=migrations
      - POSTGRES_DATABASE_URL=host=postgresql port=5432 user=postgres password=postgres database=schellar
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    healthcheck:
      test: wget -O /dev/null -q conductor-server:8080 && nc -z postgresql:5432
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  uniconfig-ui:
    # TODO: Make uniconfig-ui able to route to different uniconfig instances
    image: frinx/uniconfig-ui:1.1.9
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    environment:
      - HTTPS=true
      - OPENSSL_COMMAND_TO_GEN_CERT=openssl req -nodes -new -x509 -days 360 -keyout key.pem -out cert.pem -subj "/C=US/ST=Oregon/L=Portland/O=Company Name/OU=Org/CN=www.example.com"
      - RENEW_PERIOD=30000
    healthcheck:
      test: curl --insecure --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'https://127.0.0.1:4000'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  uniflow-api:
    image: frinx/uniflow-api:1.0.0
    environment:
      - CONDUCTOR_HOST=conductor-server:8080
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    healthcheck:
      test: curl -X GET 'http://127.0.0.1:3001/health'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1

  uniflow-ui:
    image: frinx/uniflow-ui:1.0.1
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    deploy:
      placement:
        constraints:
          - node.hostname == ${CONSTRAINT_HOSTNAME}
      mode: replicated
      replicas: 1
    healthcheck:
      test: curl --silent --write-out 'HTTPSTATUS:%{http_code}' -X GET 'http://127.0.0.1:3000'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  uniflow_elastic_data:
    name: uniflow_elastic_data
  uniflow_postgresql_data:
    name: uniflow_postgresql_data

networks:
  default:
    name: frinx-machine
