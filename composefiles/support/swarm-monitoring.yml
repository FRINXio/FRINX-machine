version: "3.7"

x-logging: &logging_loki
    driver: loki
    options:
      loki-url: "http://${MANAGER_IP_ADDR}:3100/loki/api/v1/push"
      max-file: "3"
      max-size: "10m"
      mode: non-blocking
      loki-retries: "1"
      loki-batch-size: "1500"
      loki-relabel-config: |
        - action: labelmap
          regex: swarm_(service)

services:
  grafana:
    image: grafana/grafana:8.3.0
    logging: *logging_loki
    labels:
      - traefik.enable=false 
    environment:
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    volumes: 
      - frinx-monitoring-grafana:/var/lib/grafana
      - ${UF_CONFIG_PATH}/monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ${UF_CONFIG_PATH}/monitoring/grafana/default.yml:/etc/grafana/provisioning/dashboards/default.yml
      - ${UF_CONFIG_PATH}/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      # dashboards
      - ${UF_CONFIG_PATH}/monitoring/grafana/db_loki_search.json:/etc/grafana/provisioning/dashboards/db_loki_search.json
      - ${UF_CONFIG_PATH}/monitoring/grafana/db_node_monitoring.json:/etc/grafana/provisioning/dashboards/db_node_monitoring.json
      - ${UF_CONFIG_PATH}/monitoring/grafana/db_swarm_monitoring.json:/etc/grafana/provisioning/dashboards/db_swarm_monitoring.json
      - ${UF_CONFIG_PATH}/monitoring/grafana/db_wf_monitoring.json:/etc/grafana/provisioning/dashboards/db_wf_monitoring.json
      - ${UF_CONFIG_PATH}/monitoring/grafana/db_device_monitoring.json:/etc/grafana/provisioning/dashboards/db_device_monitoring.json
    healthcheck:
      test: ["CMD-SHELL", "wget --spider localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${MG_ULIMIT_NOFILE_SOFT}
        hard: ${MG_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${MG_ULIMIT_NPROC_SOFT}
        hard: ${MG_ULIMIT_NPROC_HARD}
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${MG_RES_LIMIT_CPUS}
          memory: ${MG_RES_LIMIT_MEM}
    ports:
    - 3000:3000

  loki:
    image: grafana/loki:2.2.1
    logging:
      driver: "json-file"
      options:
        mode: non-blocking
        max-file: "3"
        max-size: "10m"
    labels:
      - traefik.enable=false
    volumes:
      - frinx-monitoring-loki:/loki
      - ${UF_CONFIG_PATH}/monitoring/loki/loki-config.yaml:/etc/loki/loki-local-config.yaml
    command: -config.file=/etc/loki/loki-local-config.yaml
    healthcheck:
        test: ["CMD-SHELL", "wget --spider 0.0.0.0:3100/ready"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 20s
    ulimits:
      nofile:
        soft: ${ML_ULIMIT_NOFILE_SOFT}
        hard: ${ML_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${ML_ULIMIT_NPROC_SOFT}
        hard: ${ML_ULIMIT_NPROC_HARD}
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        prometheus.enable: "true"
        prometheus.port: "9090"
        prometheus.path: "/metrics"
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${ML_RES_LIMIT_CPUS}
          memory: ${ML_RES_LIMIT_MEM}
    ports:
    - 3100:3100

  influxdb:
    image: influxdb:2.1
    logging: *logging_loki
    labels:
      - traefik.enable=false
    entrypoint: ["/set_env_secrets.sh", "/entrypoint.sh influxd"]
    secrets:
      - frinx_influxdb
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_RETENTION=2d
    volumes:
      - frinx-monitoring-influxdb:/var/lib/influxdb2:rw
    healthcheck:
      test: ["CMD-SHELL", "influx ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ulimits:
      nofile:
        soft: ${MI_ULIMIT_NOFILE_SOFT}
        hard: ${MI_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${MI_ULIMIT_NPROC_SOFT}
        hard: ${MI_ULIMIT_NPROC_HARD}
    # cap_drop:
    #   - all
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${MI_RES_LIMIT_CPUS}
          memory: ${MI_RES_LIMIT_MEM}

  telegraf:
    image: telegraf:1.20
    user: telegraf:${TELEGRAF_GROUP}
    logging: *logging_loki
    labels:
      - traefik.enable=false
    hostname: "{{.Node.Hostname}}"
    environment:
      - HOST_PROC=/rootfs/proc
      - HOST_SYS=/rootfs/sys
      - HOST_ETC=/rootfs/etc
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro
      - /etc/hostname:/etc/hostname:ro
    entrypoint: ["/set_env_secrets.sh", "/entrypoint.sh telegraf"]
    secrets:
      - frinx_influxdb
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
      - source: frinx-telegraf-config
        target: /etc/telegraf/telegraf.conf
        mode: 0755
    healthcheck:
      test: ["CMD-SHELL", "curl -X GET localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${MG_ULIMIT_NOFILE_SOFT}
        hard: ${MG_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${MG_ULIMIT_NPROC_SOFT}
        hard: ${MG_ULIMIT_NPROC_HARD}
    # cap_drop:
    #   - all
    deploy:
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: global
      resources:
        limits:
          cpus: ${MG_RES_LIMIT_CPUS}
          memory: ${MG_RES_LIMIT_MEM}

secrets:
  frinx_influxdb:
    external: true

configs:
  frinx-telegraf-config:
    file: ${UF_CONFIG_PATH}/monitoring/telegraf/telegraf.conf
  set_env_secrets:
    file: ${UF_CONFIG_PATH}/set_env_secrets.sh

volumes:
  frinx-monitoring-prometheus:
      name: frinx-monitoring-prometheus
  frinx-monitoring-grafana:
      name: frinx-monitoring-grafana
  frinx-monitoring-loki:
      name: frinx-monitoring-loki
  frinx-monitoring-influxdb:
      name: frinx-monitoring-influxdb

networks:
    default:
      name: frinx-machine
