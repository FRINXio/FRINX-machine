# THIS FILE IS USED AS A TEMPLATE FOR UNICONFIG SERVICES
# DO NOT DEPLOY SERVICES USING THIS FILE
# USE ./startup.sh SCRIPT TO DO IT FOR YOU
# ${UC_CONFIG_PATH} and ${LICENSE} ARE SET BY THE ./startup.sh SCRIPT

version: "3.7"

x-logging: &logging_loki
    driver: loki
    options:
      loki-url: "http://${MANAGER_IP_ADDR}:3100/loki/api/v1/push"
      max-file: "3"
      max-size: "10m"
      mode: non-blocking
      keep-file: "false"
      loki-retries: "1"
      loki-batch-size: "1500"
      loki-relabel-config: |
        - action: labelmap
          regex: swarm_(service)

x-placement: &placement-traefik
      placement:
        constraints:
          - node.role == manager

x-placement-controller: &placement-controller
      placement:
        constraints:
          - node.role == manager

x-placement-postgres: &placement-postgres
      placement:
        constraints:
          - node.role == manager

x-tcp_keepalive: &tcp_keepalive
      net.ipv4.tcp_keepalive_time: 300

x-traefik-label: &traefik_labels
      - traefik.enable=false

services:
  uniconfig:
    image: traefik:v2.7
    logging: *logging_loki
    networks:
      - default
      - uniconfig-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    secrets:
      - frinx_uniconfig_tls_cert.pem
      - frinx_uniconfig_tls_key.pem
    environment:
      - TRAEFIK_PING=true
      - TRAEFIK_LOG=true
      - TRAEFIK_LOG_LEVEL=DEBUG
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_FILE_FILENAME=/etc/traefik/traefik_dynamic.yml
      - TRAEFIK_PROVIDERS_FILE_WATCH=true
      - TRAEFIK_ENTRYPOINTS_UNICONFIG=true
      - TRAEFIK_ENTRYPOINTS_UNICONFIG_ADDRESS=:8181
      - TRAEFIK_PROVIDERS_DOCKER_SWARMMODE=true
      - TRAEFIK_PROVIDERS_DOCKER_WATCH=true
      - TRAEFIK_SERVERSTRANSPORT_ROOTCAS=/run/secrets/frinx_uniconfig_tls_cert.pem
      - TRAEFIK_SERVERSTRANSPORT_INSECURESKIPVERIFY=true
    configs:
      - source: traefik_dynamic_conf
        target: /etc/traefik/traefik_dynamic.yml
        mode: 0555
    healthcheck:
      test: traefik healthcheck
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${TF_ULIMIT_NOFILE_SOFT}
        hard: ${TF_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${TF_ULIMIT_NPROC_SOFT}
        hard: ${TF_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    sysctls:
      <<: *tcp_keepalive
    deploy: 
      <<: *placement-traefik
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${TF_RES_LIMIT_CPUS}
          memory: ${TF_RES_LIMIT_MEM}

  uniconfig-controller:
    image: frinx/uniconfig:5.0.15
    logging: *logging_loki
    networks:
      - uniconfig-network
    environment:
      - CONTAINER_ID={{.Task.Slot}}
      - SERVICE_NAME={{.Service.Name}}
      - JAVA_MAX_MEM=${UC_XMX_LIMIT_MEM}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY}
      - PROXY_ENABLED=${PROXY_ENABLED:-false}
      # Enable G1GC and GC logging 
      - _JAVA_OPTIONS=-Xmx${UC_XMX_LIMIT_MEM} -XX:+AlwaysPreTouch -Djna.nosys=true -XX:+CrashOnOutOfMemoryError -XX:MaxGCPauseMillis=200 -Xlog:gc:/opt/uniconfig-frinx/log/{{.Service.Name}}/{{.Task.Slot}}/gc.log:tags,time,uptime,level:filecount=10,filesize=5M -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1
      - dbPersistence_enabled=true
      - dbPersistence_connection_databaseLocations_host=uniconfig-postgres
      - dbPersistence_connection_databaseLocations_port=5432
      - dbPersistence_connection_maxDbPoolSize=300
      - dbPersistence_connection_enabledTls=true
      - dbPersistence_connection_tlsClientKey=config/frinx_uniconfig_tls_key.der
      - dbPersistence_connection_tlsCaCert=config/frinx_uniconfig_tls_cert.pem
      - dbPersistence_connection_tlsClientCert=config/frinx_uniconfig_tls_cert.pem
    volumes:
      - frinx_uniconfig-controller_logs:/opt/uniconfig-frinx/log
      - ${UC_CONFIG_PATH}/cache:/opt/uniconfig-frinx/cache:rw
    secrets:
      - frinx_uniconfig_db
      - source: frinx_uniconfig_tls_key.der
        target: /opt/uniconfig-frinx/config/frinx_uniconfig_tls_key.der
        mode: 0555
      - source: frinx_uniconfig_tls_cert.pem
        target: /opt/uniconfig-frinx/config/frinx_uniconfig_tls_cert.pem
        mode: 0555
      - source: frinx_uniconfig_tls_key.p12
        target: /opt/uniconfig-frinx/config/frinx_uniconfig_tls_key.p12
    configs:
      - source: uniconfig_startup
        target: /opt/uniconfig-frinx/run_uniconfig.sh
        mode: 0555
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0555
      - source: uniconfig_lighty
        target: /opt/uniconfig-frinx/config/lighty-uniconfig-config.json
        mode: 0555
      - source: uniconfig_logback
        target: /opt/uniconfig-frinx/config/logback.xml
        mode: 0555
    healthcheck:
      test: | 
        curl -o /dev/null --silent --write-out "%{http_code}" \
        -X POST 'https://127.0.0.1:8181/rests/operations/uniconfig-manager:health' \
        -H "Content-Type:application/json" --insecure | grep 200 || exit 1
      interval: 10s
      timeout: 35s
      retries: 5
      start_period: ${UC_HEALTH_START_TIME}
    entrypoint: ['/opt/uniconfig-frinx/run_uniconfig.sh']
    command: -l ${LICENSE} 
    ulimits:
      nofile:
        soft: ${UC_ULIMIT_NOFILE_SOFT}
        hard: ${UC_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${UC_ULIMIT_NPROC_SOFT}
        hard: ${UC_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    cap_add:
      - CAP_NET_BIND_SERVICE
      - NET_ADMIN
    sysctls:
      <<: *tcp_keepalive
    deploy: 
      labels:
        - traefik.enable=true
        - traefik.port=5000
        - traefik.http.routers.uniconfig.entrypoints=uniconfig
        - traefik.http.routers.uniconfig.rule=PathPrefix(`/rests`)
        - traefik.http.services.uniconfig.loadBalancer.sticky.cookie.name=uniconfig_server_id
        - traefik.http.services.uniconfig.loadbalancer.server.port=8181
        - traefik.http.services.uniconfig.loadbalancer.server.scheme=https
        - traefik.http.services.uniconfig.loadbalancer.passhostheader=true
        - traefik.http.routers.uniconfig.tls=true
      <<: *placement-controller
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: ${UC_CONTROLLER_REPLICAS:-1}
      resources:
        limits:
          cpus: ${UC_RES_LIMIT_CPUS}
          memory: ${UC_RES_LIMIT_MEM}

  uniconfig-postgres:
    image: postgres:12.10
    user: postgres
    logging: *logging_loki
    networks:
      - uniconfig-network
    labels:
      - traefik.enable=false  
    volumes:
      - frinx_uniconfig-postgresql_data:/var/lib/postgresql/data
    secrets:
      - frinx_uniconfig_db
      - source: frinx_uniconfig_tls_cert.pem
        target: /var/lib/postgresql/frinx_uniconfig_tls_cert.pem
        mode: 0544
        uid: "999"
        gid: "999"
      - source: frinx_uniconfig_tls_key.pem
        target: /var/lib/postgresql/frinx_uniconfig_tls_key.pem
        mode: 0600
        uid: "999"
        gid: "999"
    entrypoint: ["/set_env_secrets.sh","docker-entrypoint.sh"]
    command: 
      - postgres
      - -c max_connections=300 
      - -c ssl=on 
      - -c ssl_cert_file=/var/lib/postgresql/frinx_uniconfig_tls_cert.pem 
      - -c ssl_key_file=/var/lib/postgresql/frinx_uniconfig_tls_key.pem 
      - -c ssl_ca_file=/var/lib/postgresql/frinx_uniconfig_tls_cert.pem
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0555
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ulimits:
      nofile:
        soft: ${UP_ULIMIT_NOFILE_SOFT}
        hard: ${UP_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${UP_ULIMIT_NPROC_SOFT}
        hard: ${UP_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    cap_add:
      - CAP_NET_BIND_SERVICE
      - NET_ADMIN
    sysctls:
      <<: *tcp_keepalive
    deploy: 
      labels: *traefik_labels
      <<: *placement-postgres
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${UP_RES_LIMIT_CPUS}
          memory: ${UP_RES_LIMIT_MEM}

configs:
  traefik_dynamic_conf:
    name: traefik_dynamic_conf-${DEPLOY_SETTINGS_TIMESTAMP}.yml
    file: ${UF_CONFIG_PATH}/traefik/traefik_dynamic.yml
  uniconfig_startup:
    name: uniconfig_startup-${DEPLOY_SETTINGS_TIMESTAMP}.yml
    file: ${UF_CONFIG_PATH}/uniconfig/run_uniconfig.sh
  uniconfig_lighty:
    name: uniconfig_lighty-${DEPLOY_SETTINGS_TIMESTAMP}.yml
    file: ${UF_CONFIG_PATH}/uniconfig/frinx/uniconfig/config/lighty-uniconfig-config.json
  uniconfig_logback:
    name: uniconfig_logback-${DEPLOY_SETTINGS_TIMESTAMP}.yml
    file: ${UF_CONFIG_PATH}/uniconfig/frinx/uniconfig/config/logback.xml
  set_env_secrets:
    file: ${UF_CONFIG_PATH}/set_env_secrets.sh

secrets:
  frinx_uniconfig_tls_cert.pem:
    external: true
  frinx_uniconfig_tls_key.pem:
    external: true
  frinx_uniconfig_tls_key.der:
    external: true
  frinx_uniconfig_tls_key.p12:
    external: true
  frinx_uniconfig_db:
    external: true

volumes:
  frinx_uniconfig-controller_logs:
    name: frinx_uniconfig-controller_logs
  frinx_uniconfig-postgresql_data:
    name: frinx_uniconfig-postgresql_data

networks:
  default:
    name: frinx-machine

  uniconfig-network:
    name: uniconfig-network
