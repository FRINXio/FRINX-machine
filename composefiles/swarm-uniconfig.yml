# THIS FILE IS USED AS A TEMPLATE FOR UNICONFIG SERVICES
# DO NOT DEPLOY SERVICES USING THIS FILE
# USE ./startup.sh SCRIPT TO DO IT FOR YOU
# ${UC_CONFIG_PATH} and ${LICENSE} ARE SET BY THE ./startup.sh SCRIPT

version: "3.7"

services:
  uniconfig:
    image: frinx/uniconfig:4.2.7
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      - JAVA_MAX_MEM=${UC_XMX_LIMIT_MEM}
      # Enable G1GC and GC logging 
      - _JAVA_OPTIONS=-Xmx${UC_XMX_LIMIT_MEM} -XX:+AlwaysPreTouch -Djna.nosys=true -XX:+CrashOnOutOfMemoryError -XX:MaxGCPauseMillis=200 -Xlog:gc:/opt/uniconfig-frinx/log/gc.log:tags,time,uptime,level:filecount=10,filesize=5M -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1 ${UC_PROXY_HTTP_ENV} ${UC_PROXY_HTTP_PORT_ENV} ${UC_PROXY_HTTPS_ENV} ${UC_PROXY_HTTPS_PORT_ENV} ${UC_PROXY_NOPROXY_ENV}
      - dbPersistence_enabled=true
      - dbPersistence_connection_dbName=uniconfig
      - dbPersistence_connection_username=postgres
      - dbPersistence_connection_password=postgres
      - dbPersistence_connection_databaseLocations_host=uniconfig-postgres
      - dbPersistence_connection_databaseLocations_port=5432
    volumes:
      - uniconfig_logs:/opt/uniconfig-frinx/log
      - ${UC_CONFIG_PATH}/config/lighty-uniconfig-config.json:/opt/uniconfig-frinx/config/lighty-uniconfig-config.json:ro
      - ${UC_CONFIG_PATH}/config/logback.xml:/opt/uniconfig-frinx/config/logback.xml:ro
      - ${UC_CONFIG_PATH}/cache:/opt/uniconfig-frinx/cache:rw
      - ${UC_CONFIG_PATH}/config/.keystore:/opt/uniconfig-frinx/config/.keystore:ro
    healthcheck:
      test: curl --insecure -o /dev/null --user admin:admin --silent --write-out "%{http_code}" -X POST 'https://127.0.0.1:8181/rests/operations/uniconfig-manager:health' -H "Content-Type:application/json" | grep 200 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: ${UC_HEALTH_START_TIME}
    command: -l ${LICENSE} 
    ulimits:
      nofile:
        soft: ${UC_ULIMIT_NOFILE_SOFT}
        hard: ${UC_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${UC_ULIMIT_NPROC_SOFT}
        hard: ${UC_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    cap_add:
      - CAP_NET_BIND_SERVICE
    deploy:
      placement:
        constraints:
          - node.id == ${UC_SWARM_NODE_ID}
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${UC_RES_LIMIT_CPUS}
          memory: ${UC_RES_LIMIT_MEM}

  uniconfig-postgres:
    image: postgres:12.2
    user: postgres
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=uniconfig
    volumes:
      - uniconfig_postgresql_data:/var/lib/postgresql/data
      - ${UC_CONFIG_PATH}/init_schema.sql:/docker-entrypoint-initdb.d/init_schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ulimits:
      nofile:
        soft: ${UP_ULIMIT_NOFILE_SOFT}
        hard: ${UP_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${UP_ULIMIT_NPROC_SOFT}
        hard: ${UP_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    cap_add:
      - CAP_NET_BIND_SERVICE
      - NET_ADMIN
    deploy:
      placement:
        constraints:
          - node.id == ${UC_SWARM_NODE_ID}
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${UP_RES_LIMIT_CPUS}
          memory: ${UP_RES_LIMIT_MEM}


volumes:
  uniconfig_logs:
    name: uniconfig_logs
  uniconfig_postgresql_data:
    name: uniconfig_postgresql_data

networks:
  default:
    name: frinx-machine
