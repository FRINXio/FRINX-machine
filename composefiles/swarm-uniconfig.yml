# THIS FILE IS USED AS A TEMPLATE FOR UNICONFIG SERVICES
# DO NOT DEPLOY SERVICES USING THIS FILE
# USE ./startup.sh SCRIPT TO DO IT FOR YOU
# ${UC_CONFIG_PATH} and ${LICENSE} ARE SET BY THE ./startup.sh SCRIPT

version: "3.7"

x-logging: &logging_loki
    driver: loki
    options:
      loki-url: "http://${MANAGER_IP_ADDR}:3100/loki/api/v1/push"
      max-file: "3"
      max-size: "10m"
      mode: non-blocking
      loki-retries: "1"
      loki-batch-size: "1500"
      loki-relabel-config: |
        - action: labelmap
          regex: swarm_(service)

services:
  uniconfig:
    image: traefik:v2.4
    logging: *logging_loki
    volumes:
      - ${UF_CONFIG_PATH}/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ${UF_CONFIG_PATH}/traefik/traefik_dynamic.yml:/etc/traefik/traefik_dynamic.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    secrets:
      - frinx_uniconfig_tls_cert.pem
      - frinx_uniconfig_tls_key.pem
      - frinx_uniconfig_X509.crt
    healthcheck:
      test: traefik healthcheck
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ulimits:
      nofile:
        soft: ${TF_ULIMIT_NOFILE_SOFT}
        hard: ${TF_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${TF_ULIMIT_NPROC_SOFT}
        hard: ${TF_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    deploy:
      placement:
        constraints:
          - node.id == ${UF_SWARM_NODE_ID}
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${TF_RES_LIMIT_CPUS}
          memory: ${TF_RES_LIMIT_MEM}

  uniconfig-controller:
    image: frinx/uniconfig:4.2.9
    logging: *logging_loki
    labels:
      - traefik.enable=true
      - traefik.http.routers.uniconfig.entrypoints=https,uniconfig
      - traefik.http.routers.uniconfig.rule=PathPrefix(`/rests`)
      - traefik.http.services.uniconfig.loadBalancer.sticky.cookie.name=uniconfig_server_id
      - traefik.http.services.uniconfig.loadbalancer.server.port=8181
      - traefik.http.services.uniconfig.loadbalancer.server.scheme=https
      - traefik.http.services.uniconfig.loadbalancer.passhostheader=true
      - traefik.http.routers.uniconfig.tls=true
    environment:
      - CONTAINER_ID={{.Task.Slot}}
      - JAVA_MAX_MEM=${UC_XMX_LIMIT_MEM}
      # Enable G1GC and GC logging 
      - _JAVA_OPTIONS=-Xmx${UC_XMX_LIMIT_MEM} -XX:+AlwaysPreTouch -Djna.nosys=true -XX:+CrashOnOutOfMemoryError -XX:MaxGCPauseMillis=200 -Xlog:gc:/opt/uniconfig-frinx/log/gc-{{.Task.Slot}}.log:tags,time,uptime,level:filecount=10,filesize=5M -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1 ${UC_PROXY_HTTP_ENV} ${UC_PROXY_HTTP_PORT_ENV} ${UC_PROXY_HTTPS_ENV} ${UC_PROXY_HTTPS_PORT_ENV} ${UC_PROXY_NOPROXY_ENV}
      - dbPersistence_enabled=true
      - dbPersistence_connection_databaseLocations_host=uniconfig-postgres
      - dbPersistence_connection_databaseLocations_port=5432
    entrypoint: ["/opt/uniconfig-frinx/run_uniconfig.sh"]
    volumes:
      - frinx_uniconfig-controller_logs:/opt/uniconfig-frinx/log
      - ${UC_CONFIG_PATH}/config/lighty-uniconfig-config.json:/opt/uniconfig-frinx/config/lighty-uniconfig-config.json:ro
      - ${UC_CONFIG_PATH}/config/logback.xml:/opt/uniconfig-frinx/config/logback.xml:ro
      - ${UC_CONFIG_PATH}/cache:/opt/uniconfig-frinx/cache:rw
    secrets:
      - uniconfig
      - source: frinx_uniconfig_keystore
        target: /opt/uniconfig-frinx/config/.keystore
    configs:
      - source: uniconfig_startup
        target: /opt/uniconfig-frinx/run_uniconfig.sh
        mode: 0777
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    healthcheck:
    # remove password from 
      test: | 
        curl --insecure -o /dev/null --silent --write-out "%{http_code}" \
        -X POST 'https://127.0.0.1:8181/rests/operations/uniconfig-manager:health' \
        -H "Content-Type:application/json" -H "Authorization:Basic YWRtaW46YWRtaW4=" | grep 200 || exit 1
      interval: 10s
      timeout: 35s
      retries: 5
      start_period: ${UC_HEALTH_START_TIME}
    entrypoint: ['/opt/uniconfig-frinx/run_uniconfig.sh']
    command: -l ${LICENSE} 
    ulimits:
      nofile:
        soft: ${UC_ULIMIT_NOFILE_SOFT}
        hard: ${UC_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${UC_ULIMIT_NPROC_SOFT}
        hard: ${UC_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    cap_add:
      - CAP_NET_BIND_SERVICE
      - NET_ADMIN
    deploy:
      placement:
        constraints:
          - node.id == ${UC_SWARM_NODE_ID}
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: ${UC_CONTROLLER_REPLICAS:-1}
      resources:
        limits:
          cpus: ${UC_RES_LIMIT_CPUS}
          memory: ${UC_RES_LIMIT_MEM}

  uniconfig-postgres:
    image: postgres:12.2
    user: postgres
    logging: *logging_loki
    labels:
      - traefik.enable=false  
    entrypoint: ["/set_env_secrets.sh","docker-entrypoint.sh postgres"]
    volumes:
      - frinx_uniconfig-postgresql_data:/var/lib/postgresql/data
    secrets:
      - uniconfig
    configs:
      - source: set_env_secrets
        target: /set_env_secrets.sh
        mode: 0777
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ulimits:
      nofile:
        soft: ${UP_ULIMIT_NOFILE_SOFT}
        hard: ${UP_ULIMIT_NOFILE_HARD}
      nproc:
        soft: ${UP_ULIMIT_NPROC_SOFT}
        hard: ${UP_ULIMIT_NPROC_HARD}
    cap_drop:
      - all
    cap_add:
      - CAP_NET_BIND_SERVICE
      - NET_ADMIN
    deploy:
      placement:
        constraints:
          - node.id == ${UC_SWARM_NODE_ID}
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: ${UP_RES_LIMIT_CPUS}
          memory: ${UP_RES_LIMIT_MEM}

configs:
  uniconfig_startup:
    file: ${UF_CONFIG_PATH}/uniconfig/run_uniconfig.sh
  set_env_secrets:
    file: ${UF_CONFIG_PATH}/set_env_secrets.sh

secrets:
  frinx_uniconfig_tls_cert.pem:
    external: true
  frinx_uniconfig_tls_key.pem:
    external: true
  frinx_uniconfig_X509.crt:
    external: true
  frinx_uniconfig_keystore:
    external: true
  uniconfig:
    external: true

volumes:
  frinx_uniconfig-controller_logs:
    name: frinx_uniconfig-controller_logs
  frinx_uniconfig-postgresql_data:
    name: frinx_uniconfig-postgresql_data

networks:
  default:
    name: frinx-machine
